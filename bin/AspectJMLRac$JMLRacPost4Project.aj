import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.Resources.FuncionarioResource object$rac): (execution( * br.com.sigcar.Resources.FuncionarioResource..*+.*(..))
          || execution(br.com.sigcar.Resources.FuncionarioResource..*+.new(..))
          || execution( * br.com.sigcar.Resources.FuncionarioResource+.*(..))
          || execution(br.com.sigcar.Resources.FuncionarioResource+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.Resources.FuncionarioResource..*+.*(..))
          || execution(br.com.sigcar.Resources.FuncionarioResource..*+.new(..))
          || execution( * br.com.sigcar.Resources.FuncionarioResource+.*(..))
          || execution(br.com.sigcar.Resources.FuncionarioResource+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.Resources.UsuarioResource object$rac): (execution( * br.com.sigcar.Resources.UsuarioResource..*+.*(..))
          || execution(br.com.sigcar.Resources.UsuarioResource..*+.new(..))
          || execution( * br.com.sigcar.Resources.UsuarioResource+.*(..))
          || execution(br.com.sigcar.Resources.UsuarioResource+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.Resources.UsuarioResource..*+.*(..))
          || execution(br.com.sigcar.Resources.UsuarioResource..*+.new(..))
          || execution( * br.com.sigcar.Resources.UsuarioResource+.*(..))
          || execution(br.com.sigcar.Resources.UsuarioResource+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.DocumentoMBean object$rac): (execution( * br.com.sigcar.controllers.DocumentoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.DocumentoMBean+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.DocumentoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.DocumentoMBean+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.FuncionarioMBean object$rac): (execution( * br.com.sigcar.controllers.FuncionarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.FuncionarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.FuncionarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.FuncionarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.ServicoMBean object$rac): (execution( * br.com.sigcar.controllers.ServicoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ServicoMBean+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.ServicoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ServicoMBean+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.UsuarioMBean object$rac): (execution( * br.com.sigcar.controllers.UsuarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.UsuarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.UsuarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.UsuarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.ZonaMBean object$rac): (execution( * br.com.sigcar.controllers.ZonaMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ZonaMBean+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.ZonaMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ZonaMBean+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.conversor.UsuarioConversor object$rac): (execution( * br.com.sigcar.conversor.UsuarioConversor..*+.*(..))
          || execution(br.com.sigcar.conversor.UsuarioConversor..*+.new(..))
          || execution( * br.com.sigcar.conversor.UsuarioConversor+.*(..))
          || execution(br.com.sigcar.conversor.UsuarioConversor+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.conversor.UsuarioConversor..*+.*(..))
          || execution(br.com.sigcar.conversor.UsuarioConversor..*+.new(..))
          || execution( * br.com.sigcar.conversor.UsuarioConversor+.*(..))
          || execution(br.com.sigcar.conversor.UsuarioConversor+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Cliente object$rac): (execution( * br.com.sigcar.dominio.Cliente..*+.*(..))
          || execution(br.com.sigcar.dominio.Cliente..*+.new(..))
          || execution( * br.com.sigcar.dominio.Cliente+.*(..))
          || execution(br.com.sigcar.dominio.Cliente+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Cliente..*+.*(..))
          || execution(br.com.sigcar.dominio.Cliente..*+.new(..))
          || execution( * br.com.sigcar.dominio.Cliente+.*(..))
          || execution(br.com.sigcar.dominio.Cliente+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Contestacao object$rac): (execution( * br.com.sigcar.dominio.Contestacao..*+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Contestacao+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Contestacao..*+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Contestacao+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Correcao object$rac): (execution( * br.com.sigcar.dominio.Correcao..*+.*(..))
          || execution(br.com.sigcar.dominio.Correcao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Correcao+.*(..))
          || execution(br.com.sigcar.dominio.Correcao+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Correcao..*+.*(..))
          || execution(br.com.sigcar.dominio.Correcao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Correcao+.*(..))
          || execution(br.com.sigcar.dominio.Correcao+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Documento object$rac): (execution( * br.com.sigcar.dominio.Documento..*+.*(..))
          || execution(br.com.sigcar.dominio.Documento..*+.new(..))
          || execution( * br.com.sigcar.dominio.Documento+.*(..))
          || execution(br.com.sigcar.dominio.Documento+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Documento..*+.*(..))
          || execution(br.com.sigcar.dominio.Documento..*+.new(..))
          || execution( * br.com.sigcar.dominio.Documento+.*(..))
          || execution(br.com.sigcar.dominio.Documento+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Endereco object$rac): (execution( * br.com.sigcar.dominio.Endereco..*+.*(..))
          || execution(br.com.sigcar.dominio.Endereco..*+.new(..))
          || execution( * br.com.sigcar.dominio.Endereco+.*(..))
          || execution(br.com.sigcar.dominio.Endereco+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Endereco..*+.*(..))
          || execution(br.com.sigcar.dominio.Endereco..*+.new(..))
          || execution( * br.com.sigcar.dominio.Endereco+.*(..))
          || execution(br.com.sigcar.dominio.Endereco+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.dominio.Funcionario object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.text.ParseException : (execution(* br.com.sigcar.dominio.Funcionario..*+.*(..) throws java.text.ParseException) ||
    execution(br.com.sigcar.dominio.Funcionario..*+.new(..) throws java.text.ParseException) ||
execution(* br.com.sigcar.dominio.Funcionario+.*(..) throws java.text.ParseException) ||
    execution(br.com.sigcar.dominio.Funcionario+.new(..) throws java.text.ParseException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.text.ParseException) {
      throw (java.text.ParseException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Funcionario object$rac): (execution( * br.com.sigcar.dominio.Funcionario..*+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Funcionario+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Funcionario..*+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Funcionario+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Servico object$rac): (execution( * br.com.sigcar.dominio.Servico..*+.*(..))
          || execution(br.com.sigcar.dominio.Servico..*+.new(..))
          || execution( * br.com.sigcar.dominio.Servico+.*(..))
          || execution(br.com.sigcar.dominio.Servico+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Servico..*+.*(..))
          || execution(br.com.sigcar.dominio.Servico..*+.new(..))
          || execution( * br.com.sigcar.dominio.Servico+.*(..))
          || execution(br.com.sigcar.dominio.Servico+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Usuario object$rac): (execution( * br.com.sigcar.dominio.Usuario..*+.*(..))
          || execution(br.com.sigcar.dominio.Usuario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Usuario+.*(..))
          || execution(br.com.sigcar.dominio.Usuario+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Usuario..*+.*(..))
          || execution(br.com.sigcar.dominio.Usuario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Usuario+.*(..))
          || execution(br.com.sigcar.dominio.Usuario+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.enums.StatusDocumento object$rac): (execution( * br.com.sigcar.enums.StatusDocumento..*+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento..*+.new(..))
          || execution( * br.com.sigcar.enums.StatusDocumento+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.enums.StatusDocumento..*+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento..*+.new(..))
          || execution( * br.com.sigcar.enums.StatusDocumento+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.enums.TipoServico object$rac): (execution( * br.com.sigcar.enums.TipoServico..*+.*(..))
          || execution(br.com.sigcar.enums.TipoServico..*+.new(..))
          || execution( * br.com.sigcar.enums.TipoServico+.*(..))
          || execution(br.com.sigcar.enums.TipoServico+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.enums.TipoServico..*+.*(..))
          || execution(br.com.sigcar.enums.TipoServico..*+.new(..))
          || execution( * br.com.sigcar.enums.TipoServico+.*(..))
          || execution(br.com.sigcar.enums.TipoServico+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.exceptions.NegocioException object$rac): (execution( * br.com.sigcar.exceptions.NegocioException..*+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException..*+.new(..))
          || execution( * br.com.sigcar.exceptions.NegocioException+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.exceptions.NegocioException..*+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException..*+.new(..))
          || execution( * br.com.sigcar.exceptions.NegocioException+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.execucao.MainFile object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.DeathException : (execution(* br.com.sigcar.execucao.MainFile..*+.*(..) throws br.com.sigcar.exceptions.DeathException) ||
    execution(br.com.sigcar.execucao.MainFile..*+.new(..) throws br.com.sigcar.exceptions.DeathException) ||
execution(* br.com.sigcar.execucao.MainFile+.*(..) throws br.com.sigcar.exceptions.DeathException) ||
    execution(br.com.sigcar.execucao.MainFile+.new(..) throws br.com.sigcar.exceptions.DeathException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.DeathException) {
      throw (br.com.sigcar.exceptions.DeathException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.execucao.MainFile object$rac): (execution( * br.com.sigcar.execucao.MainFile..*+.*(..))
          || execution(br.com.sigcar.execucao.MainFile..*+.new(..))
          || execution( * br.com.sigcar.execucao.MainFile+.*(..))
          || execution(br.com.sigcar.execucao.MainFile+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.execucao.MainFile..*+.*(..))
          || execution(br.com.sigcar.execucao.MainFile..*+.new(..))
          || execution( * br.com.sigcar.execucao.MainFile+.*(..))
          || execution(br.com.sigcar.execucao.MainFile+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_MainFile$e8682194_02a0_408c_aaad_576277925d26{
  before(): (execution( * br.com.sigcar.execucao.MainFile..*+.*(..))
          || execution(br.com.sigcar.execucao.MainFile..*+.new(..))
          || execution( * br.com.sigcar.execucao.MainFile+.*(..))
          || execution(br.com.sigcar.execucao.MainFile+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.filtros.SegurancaFilter object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.io.IOException : (execution(* br.com.sigcar.filtros.SegurancaFilter..*+.*(..) throws java.io.IOException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..) throws java.io.IOException) ||
execution(* br.com.sigcar.filtros.SegurancaFilter+.*(..) throws java.io.IOException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter+.new(..) throws java.io.IOException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.io.IOException) {
      throw (java.io.IOException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.com.sigcar.filtros.SegurancaFilter object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws javax.servlet.ServletException : (execution(* br.com.sigcar.filtros.SegurancaFilter..*+.*(..) throws javax.servlet.ServletException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..) throws javax.servlet.ServletException) ||
execution(* br.com.sigcar.filtros.SegurancaFilter+.*(..) throws javax.servlet.ServletException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter+.new(..) throws javax.servlet.ServletException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof javax.servlet.ServletException) {
      throw (javax.servlet.ServletException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.filtros.SegurancaFilter object$rac): (execution( * br.com.sigcar.filtros.SegurancaFilter..*+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..))
          || execution( * br.com.sigcar.filtros.SegurancaFilter+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.filtros.SegurancaFilter..*+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..))
          || execution( * br.com.sigcar.filtros.SegurancaFilter+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.negocio.FuncionarioService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* br.com.sigcar.negocio.FuncionarioService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.FuncionarioService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* br.com.sigcar.negocio.FuncionarioService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.FuncionarioService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.negocio.FuncionarioService object$rac): (execution( * br.com.sigcar.negocio.FuncionarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.FuncionarioService+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.negocio.FuncionarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.FuncionarioService+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.negocio.UsuarioService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* br.com.sigcar.negocio.UsuarioService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.UsuarioService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* br.com.sigcar.negocio.UsuarioService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.UsuarioService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.negocio.UsuarioService object$rac): (execution( * br.com.sigcar.negocio.UsuarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.UsuarioService+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.negocio.UsuarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.UsuarioService+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.ContestacaoRepositorio object$rac): (execution( * br.com.sigcar.repositorios.ContestacaoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ContestacaoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.ContestacaoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ContestacaoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.DocumentoRepositorio object$rac): (execution( * br.com.sigcar.repositorios.DocumentoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.DocumentoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.DocumentoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.DocumentoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac): (execution( * br.com.sigcar.repositorios.FuncionarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.FuncionarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.FuncionarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.FuncionarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.ServicoRepositorio object$rac): (execution( * br.com.sigcar.repositorios.ServicoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ServicoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.ServicoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ServicoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.UsuarioRepositorio object$rac): (execution( * br.com.sigcar.repositorios.UsuarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.UsuarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.UsuarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.UsuarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.services.ZonaService object$rac): (execution( * br.com.sigcar.services.ZonaService..*+.*(..))
          || execution(br.com.sigcar.services.ZonaService..*+.new(..))
          || execution( * br.com.sigcar.services.ZonaService+.*(..))
          || execution(br.com.sigcar.services.ZonaService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.services.ZonaService..*+.*(..))
          || execution(br.com.sigcar.services.ZonaService..*+.new(..))
          || execution( * br.com.sigcar.services.ZonaService+.*(..))
          || execution(br.com.sigcar.services.ZonaService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.util.HibernateUtil object$rac): (execution( * br.com.sigcar.util.HibernateUtil..*+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil..*+.new(..))
          || execution( * br.com.sigcar.util.HibernateUtil+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.util.HibernateUtil..*+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil..*+.new(..))
          || execution( * br.com.sigcar.util.HibernateUtil+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests.MainFile object$rac): (execution( * tests.MainFile..*+.*(..))
          || execution(tests.MainFile..*+.new(..))
          || execution( * tests.MainFile+.*(..))
          || execution(tests.MainFile+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests.MainFile..*+.*(..))
          || execution(tests.MainFile..*+.new(..))
          || execution( * tests.MainFile+.*(..))
          || execution(tests.MainFile+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_MainFile$ccefe390_b89a_4cf3_8c02_ddedff5069fa{
  before(): (execution( * tests.MainFile..*+.*(..))
          || execution(tests.MainFile..*+.new(..))
          || execution( * tests.MainFile+.*(..))
          || execution(tests.MainFile+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

}
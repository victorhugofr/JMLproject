import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.DocumentoMBean object$rac): (execution( * br.com.sigcar.controllers.DocumentoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.DocumentoMBean+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.DocumentoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.DocumentoMBean+.*(..))
          || execution(br.com.sigcar.controllers.DocumentoMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.FuncionarioMBean object$rac): (execution( * br.com.sigcar.controllers.FuncionarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.FuncionarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.FuncionarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.FuncionarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.FuncionarioMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.ServicoMBean object$rac): (execution( * br.com.sigcar.controllers.ServicoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ServicoMBean+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.ServicoMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ServicoMBean+.*(..))
          || execution(br.com.sigcar.controllers.ServicoMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.UsuarioMBean object$rac): (execution( * br.com.sigcar.controllers.UsuarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.UsuarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.UsuarioMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.UsuarioMBean+.*(..))
          || execution(br.com.sigcar.controllers.UsuarioMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.controllers.ZonaMBean object$rac): (execution( * br.com.sigcar.controllers.ZonaMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ZonaMBean+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.controllers.ZonaMBean..*+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean..*+.new(..))
          || execution( * br.com.sigcar.controllers.ZonaMBean+.*(..))
          || execution(br.com.sigcar.controllers.ZonaMBean+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Cliente object$rac): (execution( * br.com.sigcar.dominio.Cliente..*+.*(..))
          || execution(br.com.sigcar.dominio.Cliente..*+.new(..))
          || execution( * br.com.sigcar.dominio.Cliente+.*(..))
          || execution(br.com.sigcar.dominio.Cliente+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Cliente..*+.*(..))
          || execution(br.com.sigcar.dominio.Cliente..*+.new(..))
          || execution( * br.com.sigcar.dominio.Cliente+.*(..))
          || execution(br.com.sigcar.dominio.Cliente+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Contestacao object$rac): (execution( * br.com.sigcar.dominio.Contestacao..*+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Contestacao+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Contestacao..*+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Contestacao+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Contestacao$01c17740_239f_4757_88b3_3ff2189773b7{
  before(): (execution( * br.com.sigcar.dominio.Contestacao..*+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Contestacao+.*(..))
          || execution(br.com.sigcar.dominio.Contestacao+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Correcao object$rac): (execution( * br.com.sigcar.dominio.Correcao..*+.*(..))
          || execution(br.com.sigcar.dominio.Correcao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Correcao+.*(..))
          || execution(br.com.sigcar.dominio.Correcao+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Correcao..*+.*(..))
          || execution(br.com.sigcar.dominio.Correcao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Correcao+.*(..))
          || execution(br.com.sigcar.dominio.Correcao+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Correcao$7229c78f_5a71_4520_b061_741b31fd72a9{
  before(): (execution( * br.com.sigcar.dominio.Correcao..*+.*(..))
          || execution(br.com.sigcar.dominio.Correcao..*+.new(..))
          || execution( * br.com.sigcar.dominio.Correcao+.*(..))
          || execution(br.com.sigcar.dominio.Correcao+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Documento object$rac): (execution( * br.com.sigcar.dominio.Documento..*+.*(..))
          || execution(br.com.sigcar.dominio.Documento..*+.new(..))
          || execution( * br.com.sigcar.dominio.Documento+.*(..))
          || execution(br.com.sigcar.dominio.Documento+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Documento..*+.*(..))
          || execution(br.com.sigcar.dominio.Documento..*+.new(..))
          || execution( * br.com.sigcar.dominio.Documento+.*(..))
          || execution(br.com.sigcar.dominio.Documento+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Documento$cb5b9753_f952_49e1_97b4_43c7bd2fab38{
  before(): (execution( * br.com.sigcar.dominio.Documento..*+.*(..))
          || execution(br.com.sigcar.dominio.Documento..*+.new(..))
          || execution( * br.com.sigcar.dominio.Documento+.*(..))
          || execution(br.com.sigcar.dominio.Documento+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Endereco object$rac): (execution( * br.com.sigcar.dominio.Endereco..*+.*(..))
          || execution(br.com.sigcar.dominio.Endereco..*+.new(..))
          || execution( * br.com.sigcar.dominio.Endereco+.*(..))
          || execution(br.com.sigcar.dominio.Endereco+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Endereco..*+.*(..))
          || execution(br.com.sigcar.dominio.Endereco..*+.new(..))
          || execution( * br.com.sigcar.dominio.Endereco+.*(..))
          || execution(br.com.sigcar.dominio.Endereco+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Endereco$b58e669d_5772_426f_ade6_8d29d6544866{
  before(): (execution( * br.com.sigcar.dominio.Endereco..*+.*(..))
          || execution(br.com.sigcar.dominio.Endereco..*+.new(..))
          || execution( * br.com.sigcar.dominio.Endereco+.*(..))
          || execution(br.com.sigcar.dominio.Endereco+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.dominio.Funcionario object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.text.ParseException : (execution(* br.com.sigcar.dominio.Funcionario..*+.*(..) throws java.text.ParseException) ||
    execution(br.com.sigcar.dominio.Funcionario..*+.new(..) throws java.text.ParseException) ||
execution(* br.com.sigcar.dominio.Funcionario+.*(..) throws java.text.ParseException) ||
    execution(br.com.sigcar.dominio.Funcionario+.new(..) throws java.text.ParseException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.text.ParseException) {
      throw (java.text.ParseException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Funcionario object$rac): (execution( * br.com.sigcar.dominio.Funcionario..*+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Funcionario+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Funcionario..*+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Funcionario+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Funcionario$dbf2030c_0558_4534_a5be_8569514d0b1e{
  before(): (execution( * br.com.sigcar.dominio.Funcionario..*+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Funcionario+.*(..))
          || execution(br.com.sigcar.dominio.Funcionario+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Servico object$rac): (execution( * br.com.sigcar.dominio.Servico..*+.*(..))
          || execution(br.com.sigcar.dominio.Servico..*+.new(..))
          || execution( * br.com.sigcar.dominio.Servico+.*(..))
          || execution(br.com.sigcar.dominio.Servico+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Servico..*+.*(..))
          || execution(br.com.sigcar.dominio.Servico..*+.new(..))
          || execution( * br.com.sigcar.dominio.Servico+.*(..))
          || execution(br.com.sigcar.dominio.Servico+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Servico$99767f01_bce1_47d3_b999_173355502273{
  before(): (execution( * br.com.sigcar.dominio.Servico..*+.*(..))
          || execution(br.com.sigcar.dominio.Servico..*+.new(..))
          || execution( * br.com.sigcar.dominio.Servico+.*(..))
          || execution(br.com.sigcar.dominio.Servico+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.dominio.Usuario object$rac): (execution( * br.com.sigcar.dominio.Usuario..*+.*(..))
          || execution(br.com.sigcar.dominio.Usuario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Usuario+.*(..))
          || execution(br.com.sigcar.dominio.Usuario+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.dominio.Usuario..*+.*(..))
          || execution(br.com.sigcar.dominio.Usuario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Usuario+.*(..))
          || execution(br.com.sigcar.dominio.Usuario+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Usuario$2767fde7_be43_42df_ad9e_85b0766a288d{
  before(): (execution( * br.com.sigcar.dominio.Usuario..*+.*(..))
          || execution(br.com.sigcar.dominio.Usuario..*+.new(..))
          || execution( * br.com.sigcar.dominio.Usuario+.*(..))
          || execution(br.com.sigcar.dominio.Usuario+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.enums.StatusDocumento object$rac): (execution( * br.com.sigcar.enums.StatusDocumento..*+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento..*+.new(..))
          || execution( * br.com.sigcar.enums.StatusDocumento+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.enums.StatusDocumento..*+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento..*+.new(..))
          || execution( * br.com.sigcar.enums.StatusDocumento+.*(..))
          || execution(br.com.sigcar.enums.StatusDocumento+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.enums.TipoServico object$rac): (execution( * br.com.sigcar.enums.TipoServico..*+.*(..))
          || execution(br.com.sigcar.enums.TipoServico..*+.new(..))
          || execution( * br.com.sigcar.enums.TipoServico+.*(..))
          || execution(br.com.sigcar.enums.TipoServico+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.enums.TipoServico..*+.*(..))
          || execution(br.com.sigcar.enums.TipoServico..*+.new(..))
          || execution( * br.com.sigcar.enums.TipoServico+.*(..))
          || execution(br.com.sigcar.enums.TipoServico+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.exceptions.NegocioException object$rac): (execution( * br.com.sigcar.exceptions.NegocioException..*+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException..*+.new(..))
          || execution( * br.com.sigcar.exceptions.NegocioException+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.exceptions.NegocioException..*+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException..*+.new(..))
          || execution( * br.com.sigcar.exceptions.NegocioException+.*(..))
          || execution(br.com.sigcar.exceptions.NegocioException+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.execucao.MainFile object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.execucao.DeathException : (execution(* br.com.sigcar.execucao.MainFile..*+.*(..) throws br.com.sigcar.execucao.DeathException) ||
    execution(br.com.sigcar.execucao.MainFile..*+.new(..) throws br.com.sigcar.execucao.DeathException) ||
execution(* br.com.sigcar.execucao.MainFile+.*(..) throws br.com.sigcar.execucao.DeathException) ||
    execution(br.com.sigcar.execucao.MainFile+.new(..) throws br.com.sigcar.execucao.DeathException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.execucao.DeathException) {
      throw (br.com.sigcar.execucao.DeathException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.execucao.MainFile object$rac): (execution( * br.com.sigcar.execucao.MainFile..*+.*(..))
          || execution(br.com.sigcar.execucao.MainFile..*+.new(..))
          || execution( * br.com.sigcar.execucao.MainFile+.*(..))
          || execution(br.com.sigcar.execucao.MainFile+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.execucao.MainFile..*+.*(..))
          || execution(br.com.sigcar.execucao.MainFile..*+.new(..))
          || execution( * br.com.sigcar.execucao.MainFile+.*(..))
          || execution(br.com.sigcar.execucao.MainFile+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_MainFile$c96ee179_a9b9_4d83_af06_457a4f2d88f8{
  before(): (execution( * br.com.sigcar.execucao.MainFile..*+.*(..))
          || execution(br.com.sigcar.execucao.MainFile..*+.new(..))
          || execution( * br.com.sigcar.execucao.MainFile+.*(..))
          || execution(br.com.sigcar.execucao.MainFile+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.filtros.SegurancaFilter object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.io.IOException : (execution(* br.com.sigcar.filtros.SegurancaFilter..*+.*(..) throws java.io.IOException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..) throws java.io.IOException) ||
execution(* br.com.sigcar.filtros.SegurancaFilter+.*(..) throws java.io.IOException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter+.new(..) throws java.io.IOException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.io.IOException) {
      throw (java.io.IOException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.com.sigcar.filtros.SegurancaFilter object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws javax.servlet.ServletException : (execution(* br.com.sigcar.filtros.SegurancaFilter..*+.*(..) throws javax.servlet.ServletException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..) throws javax.servlet.ServletException) ||
execution(* br.com.sigcar.filtros.SegurancaFilter+.*(..) throws javax.servlet.ServletException) ||
    execution(br.com.sigcar.filtros.SegurancaFilter+.new(..) throws javax.servlet.ServletException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof javax.servlet.ServletException) {
      throw (javax.servlet.ServletException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.filtros.SegurancaFilter object$rac): (execution( * br.com.sigcar.filtros.SegurancaFilter..*+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..))
          || execution( * br.com.sigcar.filtros.SegurancaFilter+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.filtros.SegurancaFilter..*+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter..*+.new(..))
          || execution( * br.com.sigcar.filtros.SegurancaFilter+.*(..))
          || execution(br.com.sigcar.filtros.SegurancaFilter+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.negocio.ContestacaoService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* br.com.sigcar.negocio.ContestacaoService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.ContestacaoService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* br.com.sigcar.negocio.ContestacaoService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.ContestacaoService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.negocio.ContestacaoService object$rac): (execution( * br.com.sigcar.negocio.ContestacaoService..*+.*(..))
          || execution(br.com.sigcar.negocio.ContestacaoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.ContestacaoService+.*(..))
          || execution(br.com.sigcar.negocio.ContestacaoService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.negocio.ContestacaoService..*+.*(..))
          || execution(br.com.sigcar.negocio.ContestacaoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.ContestacaoService+.*(..))
          || execution(br.com.sigcar.negocio.ContestacaoService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_ContestacaoService$34ae852f_740c_4772_a8fc_9e0ccd7a0bd8{
  before(): (execution( * br.com.sigcar.negocio.ContestacaoService..*+.*(..))
          || execution(br.com.sigcar.negocio.ContestacaoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.ContestacaoService+.*(..))
          || execution(br.com.sigcar.negocio.ContestacaoService+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.negocio.DocumentoService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* br.com.sigcar.negocio.DocumentoService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.DocumentoService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* br.com.sigcar.negocio.DocumentoService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.DocumentoService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.negocio.DocumentoService object$rac): (execution( * br.com.sigcar.negocio.DocumentoService..*+.*(..))
          || execution(br.com.sigcar.negocio.DocumentoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.DocumentoService+.*(..))
          || execution(br.com.sigcar.negocio.DocumentoService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.negocio.DocumentoService..*+.*(..))
          || execution(br.com.sigcar.negocio.DocumentoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.DocumentoService+.*(..))
          || execution(br.com.sigcar.negocio.DocumentoService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_DocumentoService$893fb215_faba_49ab_8e73_f24e9b4de636{
  before(): (execution( * br.com.sigcar.negocio.DocumentoService..*+.*(..))
          || execution(br.com.sigcar.negocio.DocumentoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.DocumentoService+.*(..))
          || execution(br.com.sigcar.negocio.DocumentoService+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.negocio.FuncionarioService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* br.com.sigcar.negocio.FuncionarioService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.FuncionarioService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* br.com.sigcar.negocio.FuncionarioService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.FuncionarioService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.negocio.FuncionarioService object$rac): (execution( * br.com.sigcar.negocio.FuncionarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.FuncionarioService+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.negocio.FuncionarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.FuncionarioService+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_FuncionarioService$ffb7c4f1_8d5f_416e_94aa_a73d80f822cd{
  before(): (execution( * br.com.sigcar.negocio.FuncionarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.FuncionarioService+.*(..))
          || execution(br.com.sigcar.negocio.FuncionarioService+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.negocio.ServicoService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* br.com.sigcar.negocio.ServicoService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.ServicoService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* br.com.sigcar.negocio.ServicoService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.ServicoService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.negocio.ServicoService object$rac): (execution( * br.com.sigcar.negocio.ServicoService..*+.*(..))
          || execution(br.com.sigcar.negocio.ServicoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.ServicoService+.*(..))
          || execution(br.com.sigcar.negocio.ServicoService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.negocio.ServicoService..*+.*(..))
          || execution(br.com.sigcar.negocio.ServicoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.ServicoService+.*(..))
          || execution(br.com.sigcar.negocio.ServicoService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_ServicoService$78cdb693_b722_4e0f_90bb_3c2fbdb3407f{
  before(): (execution( * br.com.sigcar.negocio.ServicoService..*+.*(..))
          || execution(br.com.sigcar.negocio.ServicoService..*+.new(..))
          || execution( * br.com.sigcar.negocio.ServicoService+.*(..))
          || execution(br.com.sigcar.negocio.ServicoService+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.com.sigcar.negocio.UsuarioService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* br.com.sigcar.negocio.UsuarioService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.UsuarioService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* br.com.sigcar.negocio.UsuarioService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(br.com.sigcar.negocio.UsuarioService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.negocio.UsuarioService object$rac): (execution( * br.com.sigcar.negocio.UsuarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.UsuarioService+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.negocio.UsuarioService..*+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService..*+.new(..))
          || execution( * br.com.sigcar.negocio.UsuarioService+.*(..))
          || execution(br.com.sigcar.negocio.UsuarioService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.ContestacaoRepositorio object$rac): (execution( * br.com.sigcar.repositorios.ContestacaoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ContestacaoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.ContestacaoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ContestacaoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_ContestacaoRepositorio$afc606ca_fe79_482f_8b92_debbee532f5c{
  before(): (execution( * br.com.sigcar.repositorios.ContestacaoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ContestacaoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ContestacaoRepositorio+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.DocumentoRepositorio object$rac): (execution( * br.com.sigcar.repositorios.DocumentoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.DocumentoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.DocumentoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.DocumentoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_DocumentoRepositorio$a5852e1b_6ef9_4464_9bcc_551cad07d3da{
  before(): (execution( * br.com.sigcar.repositorios.DocumentoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.DocumentoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.DocumentoRepositorio+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac): (execution( * br.com.sigcar.repositorios.FuncionarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.FuncionarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.FuncionarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.FuncionarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_FuncionarioRepositorio$d35fd50c_d788_4ace_a022_87a420cfe144{
  before(): (execution( * br.com.sigcar.repositorios.FuncionarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.FuncionarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.FuncionarioRepositorio+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.ServicoRepositorio object$rac): (execution( * br.com.sigcar.repositorios.ServicoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ServicoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.ServicoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ServicoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_ServicoRepositorio$efc9e674_f464_4737_bedb_da00d79f9a82{
  before(): (execution( * br.com.sigcar.repositorios.ServicoRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.ServicoRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.ServicoRepositorio+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.repositorios.UsuarioRepositorio object$rac): (execution( * br.com.sigcar.repositorios.UsuarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.UsuarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.repositorios.UsuarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.UsuarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_UsuarioRepositorio$a48f5055_a4d3_4030_a78a_1fce8384d030{
  before(): (execution( * br.com.sigcar.repositorios.UsuarioRepositorio..*+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio..*+.new(..))
          || execution( * br.com.sigcar.repositorios.UsuarioRepositorio+.*(..))
          || execution(br.com.sigcar.repositorios.UsuarioRepositorio+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.services.ZonaService object$rac): (execution( * br.com.sigcar.services.ZonaService..*+.*(..))
          || execution(br.com.sigcar.services.ZonaService..*+.new(..))
          || execution( * br.com.sigcar.services.ZonaService+.*(..))
          || execution(br.com.sigcar.services.ZonaService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.services.ZonaService..*+.*(..))
          || execution(br.com.sigcar.services.ZonaService..*+.new(..))
          || execution( * br.com.sigcar.services.ZonaService+.*(..))
          || execution(br.com.sigcar.services.ZonaService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_ZonaService$93e735b9_3994_46bf_ae6b_44c255666bb9{
  before(): (execution( * br.com.sigcar.services.ZonaService..*+.*(..))
          || execution(br.com.sigcar.services.ZonaService..*+.new(..))
          || execution( * br.com.sigcar.services.ZonaService+.*(..))
          || execution(br.com.sigcar.services.ZonaService+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.com.sigcar.util.HibernateUtil object$rac): (execution( * br.com.sigcar.util.HibernateUtil..*+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil..*+.new(..))
          || execution( * br.com.sigcar.util.HibernateUtil+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.com.sigcar.util.HibernateUtil..*+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil..*+.new(..))
          || execution( * br.com.sigcar.util.HibernateUtil+.*(..))
          || execution(br.com.sigcar.util.HibernateUtil+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestContestacao object$rac): (execution( * tests1.TestContestacao..*+.*(..))
          || execution(tests1.TestContestacao..*+.new(..))
          || execution( * tests1.TestContestacao+.*(..))
          || execution(tests1.TestContestacao+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestContestacao..*+.*(..))
          || execution(tests1.TestContestacao..*+.new(..))
          || execution( * tests1.TestContestacao+.*(..))
          || execution(tests1.TestContestacao+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestContestacaoRepositorio object$rac): (execution( * tests1.TestContestacaoRepositorio..*+.*(..))
          || execution(tests1.TestContestacaoRepositorio..*+.new(..))
          || execution( * tests1.TestContestacaoRepositorio+.*(..))
          || execution(tests1.TestContestacaoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestContestacaoRepositorio..*+.*(..))
          || execution(tests1.TestContestacaoRepositorio..*+.new(..))
          || execution( * tests1.TestContestacaoRepositorio+.*(..))
          || execution(tests1.TestContestacaoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final tests1.TestContestacaoService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* tests1.TestContestacaoService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(tests1.TestContestacaoService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* tests1.TestContestacaoService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(tests1.TestContestacaoService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestContestacaoService object$rac): (execution( * tests1.TestContestacaoService..*+.*(..))
          || execution(tests1.TestContestacaoService..*+.new(..))
          || execution( * tests1.TestContestacaoService+.*(..))
          || execution(tests1.TestContestacaoService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestContestacaoService..*+.*(..))
          || execution(tests1.TestContestacaoService..*+.new(..))
          || execution( * tests1.TestContestacaoService+.*(..))
          || execution(tests1.TestContestacaoService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestCorrecao object$rac): (execution( * tests1.TestCorrecao..*+.*(..))
          || execution(tests1.TestCorrecao..*+.new(..))
          || execution( * tests1.TestCorrecao+.*(..))
          || execution(tests1.TestCorrecao+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestCorrecao..*+.*(..))
          || execution(tests1.TestCorrecao..*+.new(..))
          || execution( * tests1.TestCorrecao+.*(..))
          || execution(tests1.TestCorrecao+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestDocumento object$rac): (execution( * tests1.TestDocumento..*+.*(..))
          || execution(tests1.TestDocumento..*+.new(..))
          || execution( * tests1.TestDocumento+.*(..))
          || execution(tests1.TestDocumento+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestDocumento..*+.*(..))
          || execution(tests1.TestDocumento..*+.new(..))
          || execution( * tests1.TestDocumento+.*(..))
          || execution(tests1.TestDocumento+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestDocumentoRepositorio object$rac): (execution( * tests1.TestDocumentoRepositorio..*+.*(..))
          || execution(tests1.TestDocumentoRepositorio..*+.new(..))
          || execution( * tests1.TestDocumentoRepositorio+.*(..))
          || execution(tests1.TestDocumentoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestDocumentoRepositorio..*+.*(..))
          || execution(tests1.TestDocumentoRepositorio..*+.new(..))
          || execution( * tests1.TestDocumentoRepositorio+.*(..))
          || execution(tests1.TestDocumentoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final tests1.TestDocumentoService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* tests1.TestDocumentoService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(tests1.TestDocumentoService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* tests1.TestDocumentoService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(tests1.TestDocumentoService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestDocumentoService object$rac): (execution( * tests1.TestDocumentoService..*+.*(..))
          || execution(tests1.TestDocumentoService..*+.new(..))
          || execution( * tests1.TestDocumentoService+.*(..))
          || execution(tests1.TestDocumentoService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestDocumentoService..*+.*(..))
          || execution(tests1.TestDocumentoService..*+.new(..))
          || execution( * tests1.TestDocumentoService+.*(..))
          || execution(tests1.TestDocumentoService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestEndereco object$rac): (execution( * tests1.TestEndereco..*+.*(..))
          || execution(tests1.TestEndereco..*+.new(..))
          || execution( * tests1.TestEndereco+.*(..))
          || execution(tests1.TestEndereco+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestEndereco..*+.*(..))
          || execution(tests1.TestEndereco..*+.new(..))
          || execution( * tests1.TestEndereco+.*(..))
          || execution(tests1.TestEndereco+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestFuncionario object$rac): (execution( * tests1.TestFuncionario..*+.*(..))
          || execution(tests1.TestFuncionario..*+.new(..))
          || execution( * tests1.TestFuncionario+.*(..))
          || execution(tests1.TestFuncionario+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestFuncionario..*+.*(..))
          || execution(tests1.TestFuncionario..*+.new(..))
          || execution( * tests1.TestFuncionario+.*(..))
          || execution(tests1.TestFuncionario+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestFuncionarioRepositorio object$rac): (execution( * tests1.TestFuncionarioRepositorio..*+.*(..))
          || execution(tests1.TestFuncionarioRepositorio..*+.new(..))
          || execution( * tests1.TestFuncionarioRepositorio+.*(..))
          || execution(tests1.TestFuncionarioRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestFuncionarioRepositorio..*+.*(..))
          || execution(tests1.TestFuncionarioRepositorio..*+.new(..))
          || execution( * tests1.TestFuncionarioRepositorio+.*(..))
          || execution(tests1.TestFuncionarioRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final tests1.TestFuncionarioService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.com.sigcar.exceptions.NegocioException : (execution(* tests1.TestFuncionarioService..*+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(tests1.TestFuncionarioService..*+.new(..) throws br.com.sigcar.exceptions.NegocioException) ||
execution(* tests1.TestFuncionarioService+.*(..) throws br.com.sigcar.exceptions.NegocioException) ||
    execution(tests1.TestFuncionarioService+.new(..) throws br.com.sigcar.exceptions.NegocioException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.com.sigcar.exceptions.NegocioException) {
      throw (br.com.sigcar.exceptions.NegocioException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestFuncionarioService object$rac): (execution( * tests1.TestFuncionarioService..*+.*(..))
          || execution(tests1.TestFuncionarioService..*+.new(..))
          || execution( * tests1.TestFuncionarioService+.*(..))
          || execution(tests1.TestFuncionarioService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestFuncionarioService..*+.*(..))
          || execution(tests1.TestFuncionarioService..*+.new(..))
          || execution( * tests1.TestFuncionarioService+.*(..))
          || execution(tests1.TestFuncionarioService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestServico object$rac): (execution( * tests1.TestServico..*+.*(..))
          || execution(tests1.TestServico..*+.new(..))
          || execution( * tests1.TestServico+.*(..))
          || execution(tests1.TestServico+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestServico..*+.*(..))
          || execution(tests1.TestServico..*+.new(..))
          || execution( * tests1.TestServico+.*(..))
          || execution(tests1.TestServico+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestServicoRepositorio object$rac): (execution( * tests1.TestServicoRepositorio..*+.*(..))
          || execution(tests1.TestServicoRepositorio..*+.new(..))
          || execution( * tests1.TestServicoRepositorio+.*(..))
          || execution(tests1.TestServicoRepositorio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestServicoRepositorio..*+.*(..))
          || execution(tests1.TestServicoRepositorio..*+.new(..))
          || execution( * tests1.TestServicoRepositorio+.*(..))
          || execution(tests1.TestServicoRepositorio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestServicoService object$rac): (execution( * tests1.TestServicoService..*+.*(..))
          || execution(tests1.TestServicoService..*+.new(..))
          || execution( * tests1.TestServicoService+.*(..))
          || execution(tests1.TestServicoService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestServicoService..*+.*(..))
          || execution(tests1.TestServicoService..*+.new(..))
          || execution( * tests1.TestServicoService+.*(..))
          || execution(tests1.TestServicoService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final tests1.TestUsuario object$rac): (execution( * tests1.TestUsuario..*+.*(..))
          || execution(tests1.TestUsuario..*+.new(..))
          || execution( * tests1.TestUsuario+.*(..))
          || execution(tests1.TestUsuario+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * tests1.TestUsuario..*+.*(..))
          || execution(tests1.TestUsuario..*+.new(..))
          || execution( * tests1.TestUsuario+.*(..))
          || execution(tests1.TestUsuario+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}
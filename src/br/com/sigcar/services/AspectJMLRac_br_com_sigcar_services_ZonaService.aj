import br.com.sigcar.services.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.net.URL;
import java.net.URLConnection;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Named;
import com.google.gson.Gson;
import br.com.sigcar.dominio.Endereco;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_services_ZonaService$cd228703_c368_4925_98ad_93168f37b1fe {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;









  /** Generated by AspectJML to check the exceptional postcondition of
   * method ZonaService. */
  after (final br.com.sigcar.services.ZonaService object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.services.ZonaService.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.services.ZonaService.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.<init> regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.services.ZonaService.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method buscarCep. */
  after (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep2) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.buscarCep(java.lang.String))) && this(object$rac) && args(cep2) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscarCep(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (cep2 != null)) {
  		     if (rac$e instanceof java.lang.Throwable) {
  			   java.lang.Throwable jml$ex = (java.lang.Throwable) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.lang.RuntimeException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.buscarCep regarding specifications at \nline 36, character 27 (br.com.sigcar.services.ZonaService.java:36)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.buscarCep regarding specifications at \nline 36, character 27 (br.com.sigcar.services.ZonaService.java:36)"+", and \n"+"by method br.com.sigcar.services.ZonaService.buscarCep regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 57 (br.com.sigcar.services.ZonaService.java:57)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscarCep(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getZona. */
  after (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep2) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.getZona(java.lang.String))) && this(object$rac) && args(cep2) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getZona(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (cep2 != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.getZona\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.getZona regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 86 (br.com.sigcar.services.ZonaService.java:86)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getZona(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getBairro. */
  after (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.getBairro(java.lang.String))) && this(object$rac) && args(cep) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getBairro(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.getBairro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.getBairro regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 94 (br.com.sigcar.services.ZonaService.java:94)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getBairro(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getLogradouro. */
  after (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.getLogradouro(java.lang.String))) && this(object$rac) && args(cep) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLogradouro(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.getLogradouro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.getLogradouro regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 102 (br.com.sigcar.services.ZonaService.java:102)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLogradouro(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getUf. */
  after (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.getUf(java.lang.String))) && this(object$rac) && args(cep) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUf(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.getUf\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.getUf regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 110 (br.com.sigcar.services.ZonaService.java:110)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUf(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCartorio. */
  after (final br.com.sigcar.services.ZonaService object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.getCartorio())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartorio()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.getCartorio\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.getCartorio regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 114 (br.com.sigcar.services.ZonaService.java:114)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartorio()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setCep. */
  after (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep2) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.services.ZonaService.setCep(java.lang.String))) && this(object$rac) && args(cep2) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCep(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (cep2 != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.setCep\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.setCep regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCep(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCep. */
  after (final br.com.sigcar.services.ZonaService object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.getCep())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCep()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.getCep\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.getCep regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 146 (br.com.sigcar.services.ZonaService.java:146)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCep()", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method buscarCep. */
  before (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep2) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.buscarCep(java.lang.String))) && 
     this(object$rac) && args(cep2) {
       String preErrorMsg = "by method br.com.sigcar.services.ZonaService.buscarCep regarding specifications at \nFile \"br.com.sigcar.services.ZonaService.java\", [spec-case]: line 36, character 35 (br.com.sigcar.services.ZonaService.java:36), and \nby method br.com.sigcar.services.ZonaService.buscarCep regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 57 (br.com.sigcar.services.ZonaService.java:57)"+", when \n"+"\t\'cep2\' is "+cep2;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.buscarCep regarding specifications at \n[spec-case]: line 36, character 35 (br.com.sigcar.services.ZonaService.java:36)"+", when \n"+"\t\'cep2\' is "+cep2+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cep2 != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscarCep(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method getZona. */
  before (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep2) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.getZona(java.lang.String))) && 
     this(object$rac) && args(cep2) {
       String preErrorMsg = "by method br.com.sigcar.services.ZonaService.getZona regarding specifications at \nFile \"br.com.sigcar.services.ZonaService.java\", [spec-case]: line 60, character 35 (br.com.sigcar.services.ZonaService.java:60), and \nby method br.com.sigcar.services.ZonaService.getZona regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 86 (br.com.sigcar.services.ZonaService.java:86)"+", when \n"+"\t\'cep2\' is "+cep2;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.getZona regarding specifications at \n[spec-case]: line 60, character 35 (br.com.sigcar.services.ZonaService.java:60)"+", when \n"+"\t\'cep2\' is "+cep2+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cep2 != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getZona(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setCep. */
  before (final br.com.sigcar.services.ZonaService object$rac, final java.lang.String cep2) :
     (execution(void br.com.sigcar.services.ZonaService.setCep(java.lang.String))) && 
     this(object$rac) && args(cep2) {
       String preErrorMsg = "by method br.com.sigcar.services.ZonaService.setCep regarding specifications at \nFile \"br.com.sigcar.services.ZonaService.java\", [spec-case]: line 138, character 28 (br.com.sigcar.services.ZonaService.java:138), and \nby method br.com.sigcar.services.ZonaService.setCep regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\""+", when \n"+"\t\'cep2\' is "+cep2;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.setCep regarding specifications at \n[spec-case]: line 138, character 28 (br.com.sigcar.services.ZonaService.java:138)"+", when \n"+"\t\'cep2\' is "+cep2+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cep2 != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCep(java.lang.String)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method cartorioZona. */
  java.lang.String around (final br.com.sigcar.services.ZonaService object$rac) :
     (execution(java.lang.String br.com.sigcar.services.ZonaService.cartorioZona()))
     && this(object$rac) {
      boolean rac$b = true;
      java.lang.String rac$result = null;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (object$rac.cep != null);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.services.ZonaService.cartorioZona regarding specifications at \nFile \"br.com.sigcar.services.ZonaService.java\", [spec-case]: line 117, character 36 (br.com.sigcar.services.ZonaService.java:117), and \nby method br.com.sigcar.services.ZonaService.cartorioZona regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 135 (br.com.sigcar.services.ZonaService.java:135)"+", when \n"+"\t\'this.cep\' is "+object$rac.cep;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.cartorioZona regarding specifications at \n[spec-case]: line 117, character 36 (br.com.sigcar.services.ZonaService.java:117)"+", when \n"+"\t\'this.cep\' is "+object$rac.cep+"\nCaused by: ";
      try {
        rac$b = (object$rac.cep != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cartorioZona()");
      try {
        rac$result = proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.services.ZonaService.java\" by method br.com.sigcar.services.ZonaService.cartorioZona\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.services.ZonaService.cartorioZona regarding code at \nFile \"br.com.sigcar.services.ZonaService.java\", line 135 (br.com.sigcar.services.ZonaService.java:135)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cartorioZona()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cartorioZona()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

}

import br.com.sigcar.dominio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.OneToMany;
import br.com.sigcar.enums.StatusDocumento;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_dominio_Documento$f78a9d38_e4f4_43d3_a71c_e548f1283b9a {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;




















  /** Generated by AspectJML to check the exceptional postcondition of
   * method getArquivoBase64. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Documento.getArquivoBase64())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getArquivoBase64()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getArquivoBase64\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getArquivoBase64 regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 51 (br.com.sigcar.dominio.Documento.java:51)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getArquivoBase64()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setArquivoBase64. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String arquivoBase64) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setArquivoBase64(java.lang.String))) && this(object$rac) && args(arquivoBase64) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setArquivoBase64 regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 55, character 39 (br.com.sigcar.dominio.Documento.java:55), and \nby method br.com.sigcar.dominio.Documento.setArquivoBase64 regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.arquivoBase64\' is "+object$rac.arquivoBase64+"\n\t\'arquivoBase64\' is "+arquivoBase64;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setArquivoBase64 regarding specifications at \nline 55, character 39 (br.com.sigcar.dominio.Documento.java:55)"+", when \n"+"\t\'this.arquivoBase64\' is "+object$rac.arquivoBase64+"\n\t\'arquivoBase64\' is "+arquivoBase64+"\nCaused by: ";
       if ((arquivoBase64 != null)){
         try {
           rac$b = (object$rac.arquivoBase64 == arquivoBase64);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setArquivoBase64. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String arquivoBase64) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setArquivoBase64(java.lang.String))) && this(object$rac) && args(arquivoBase64) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (arquivoBase64 != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setArquivoBase64\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setArquivoBase64 regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getExtensao. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Documento.getExtensao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getExtensao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getExtensao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getExtensao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 63 (br.com.sigcar.dominio.Documento.java:63)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getExtensao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setExtensao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String extensao) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setExtensao(java.lang.String))) && this(object$rac) && args(extensao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setExtensao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 67, character 34 (br.com.sigcar.dominio.Documento.java:67), and \nby method br.com.sigcar.dominio.Documento.setExtensao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.extensao\' is "+object$rac.extensao+"\n\t\'extensao\' is "+extensao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setExtensao regarding specifications at \nline 67, character 34 (br.com.sigcar.dominio.Documento.java:67)"+", when \n"+"\t\'this.extensao\' is "+object$rac.extensao+"\n\t\'extensao\' is "+extensao+"\nCaused by: ";
       if ((extensao != null)){
         try {
           rac$b = (object$rac.extensao == extensao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setExtensao(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setExtensao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String extensao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setExtensao(java.lang.String))) && this(object$rac) && args(extensao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setExtensao(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (extensao != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setExtensao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setExtensao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setExtensao(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getArquivoBase64Original. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(byte[] br.com.sigcar.dominio.Documento.getArquivoBase64Original())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getArquivoBase64Original()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getArquivoBase64Original\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getArquivoBase64Original regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 74 (br.com.sigcar.dominio.Documento.java:74)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getArquivoBase64Original()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setArquivoBase64Original. */
  after (final br.com.sigcar.dominio.Documento object$rac, final byte[] arquivoBase64Original) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setArquivoBase64Original(byte[]))) && this(object$rac) && args(arquivoBase64Original) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setArquivoBase64Original regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 77, character 46 (br.com.sigcar.dominio.Documento.java:77), and \nby method br.com.sigcar.dominio.Documento.setArquivoBase64Original regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.arquivoBase64Original\' is "+object$rac.arquivoBase64Original+"\n\t\'arquivoBase64Original\' is "+arquivoBase64Original;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setArquivoBase64Original regarding specifications at \nline 77, character 46 (br.com.sigcar.dominio.Documento.java:77)"+", when \n"+"\t\'this.arquivoBase64Original\' is "+object$rac.arquivoBase64Original+"\n\t\'arquivoBase64Original\' is "+arquivoBase64Original+"\nCaused by: ";
       if ((arquivoBase64Original != null)){
         try {
           rac$b = (object$rac.arquivoBase64Original == arquivoBase64Original);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64Original(byte[])");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setArquivoBase64Original. */
  after (final br.com.sigcar.dominio.Documento object$rac, final byte[] arquivoBase64Original) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setArquivoBase64Original(byte[]))) && this(object$rac) && args(arquivoBase64Original) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64Original(byte[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (arquivoBase64Original != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setArquivoBase64Original\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setArquivoBase64Original regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64Original(byte[])", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getId. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(int br.com.sigcar.dominio.Documento.getId())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getId()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getId\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getId regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 84 (br.com.sigcar.dominio.Documento.java:84)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getId()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setId. */
  after (final br.com.sigcar.dominio.Documento object$rac, final int id) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setId(int))) && this(object$rac) && args(id) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setId regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 88, character 28 (br.com.sigcar.dominio.Documento.java:88), and \nby method br.com.sigcar.dominio.Documento.setId regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.id\' is "+object$rac.id+"\n\t\'id\' is "+id;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setId regarding specifications at \nline 88, character 28 (br.com.sigcar.dominio.Documento.java:88)"+", when \n"+"\t\'this.id\' is "+object$rac.id+"\n\t\'id\' is "+id+"\nCaused by: ";
       if ((id > 0)){
         try {
           rac$b = (object$rac.id == id);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setId. */
  after (final br.com.sigcar.dominio.Documento object$rac, final int id) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setId(int))) && this(object$rac) && args(id) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (id > 0)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setId\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setId regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getObservacao. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Documento.getObservacao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getObservacao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getObservacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getObservacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 96 (br.com.sigcar.dominio.Documento.java:96)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getObservacao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setObservacao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String observacao) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setObservacao(java.lang.String))) && this(object$rac) && args(observacao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setObservacao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 100, character 36 (br.com.sigcar.dominio.Documento.java:100), and \nby method br.com.sigcar.dominio.Documento.setObservacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.observacao\' is "+object$rac.observacao+"\n\t\'observacao\' is "+observacao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setObservacao regarding specifications at \nline 100, character 36 (br.com.sigcar.dominio.Documento.java:100)"+", when \n"+"\t\'this.observacao\' is "+object$rac.observacao+"\n\t\'observacao\' is "+observacao+"\nCaused by: ";
       if ((observacao != null)){
         try {
           rac$b = (object$rac.observacao == observacao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setObservacao(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setObservacao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String observacao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setObservacao(java.lang.String))) && this(object$rac) && args(observacao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setObservacao(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (observacao != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setObservacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setObservacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setObservacao(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getNome. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Documento.getNome())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getNome\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getNome regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 107 (br.com.sigcar.dominio.Documento.java:107)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getNome()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setNome. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String nome) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setNome(java.lang.String))) && this(object$rac) && args(nome) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setNome regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 111, character 30 (br.com.sigcar.dominio.Documento.java:111), and \nby method br.com.sigcar.dominio.Documento.setNome regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.nome\' is "+object$rac.nome+"\n\t\'nome\' is "+nome;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setNome regarding specifications at \nline 111, character 30 (br.com.sigcar.dominio.Documento.java:111)"+", when \n"+"\t\'this.nome\' is "+object$rac.nome+"\n\t\'nome\' is "+nome+"\nCaused by: ";
       if ((nome != null)){
         try {
           rac$b = (object$rac.nome == nome);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setNome. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String nome) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setNome(java.lang.String))) && this(object$rac) && args(nome) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (nome != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setNome\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setNome regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getStatus. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(br.com.sigcar.enums.StatusDocumento br.com.sigcar.dominio.Documento.getStatus())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getStatus()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getStatus\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getStatus regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 118 (br.com.sigcar.dominio.Documento.java:118)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getStatus()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setStatus. */
  after (final br.com.sigcar.dominio.Documento object$rac, final br.com.sigcar.enums.StatusDocumento status) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setStatus(br.com.sigcar.enums.StatusDocumento))) && this(object$rac) && args(status) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setStatus regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 122, character 32 (br.com.sigcar.dominio.Documento.java:122), and \nby method br.com.sigcar.dominio.Documento.setStatus regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.status\' is "+object$rac.status+"\n\t\'status\' is "+status;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setStatus regarding specifications at \nline 122, character 32 (br.com.sigcar.dominio.Documento.java:122)"+", when \n"+"\t\'this.status\' is "+object$rac.status+"\n\t\'status\' is "+status+"\nCaused by: ";
       if ((status != null)){
         try {
           rac$b = (object$rac.status == status);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(br.com.sigcar.enums.StatusDocumento)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setStatus. */
  after (final br.com.sigcar.dominio.Documento object$rac, final br.com.sigcar.enums.StatusDocumento status) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setStatus(br.com.sigcar.enums.StatusDocumento))) && this(object$rac) && args(status) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(br.com.sigcar.enums.StatusDocumento)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (status != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setStatus\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setStatus regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(br.com.sigcar.enums.StatusDocumento)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getContestacao. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(java.util.List br.com.sigcar.dominio.Documento.getContestacao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getContestacao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getContestacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getContestacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 129 (br.com.sigcar.dominio.Documento.java:129)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getContestacao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setContestacao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.util.List contestacao) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setContestacao(java.util.List))) && this(object$rac) && args(contestacao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setContestacao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 133, character 38 (br.com.sigcar.dominio.Documento.java:133), and \nby method br.com.sigcar.dominio.Documento.setContestacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.contestacoes\' is "+object$rac.contestacoes+"\n\t\'contestacao\' is "+contestacao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setContestacao regarding specifications at \nline 133, character 38 (br.com.sigcar.dominio.Documento.java:133)"+", when \n"+"\t\'this.contestacoes\' is "+object$rac.contestacoes+"\n\t\'contestacao\' is "+contestacao+"\nCaused by: ";
       if ((contestacao != null)){
         try {
           rac$b = (object$rac.contestacoes == contestacao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setContestacao(java.util.List)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setContestacao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.util.List contestacao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setContestacao(java.util.List))) && this(object$rac) && args(contestacao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setContestacao(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (contestacao != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setContestacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setContestacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setContestacao(java.util.List)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCorrecao. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(java.util.List br.com.sigcar.dominio.Documento.getCorrecao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCorrecao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.getCorrecao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.getCorrecao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 141 (br.com.sigcar.dominio.Documento.java:141)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCorrecao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setCorrecao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.util.List correcao) returning () :
     (execution(void br.com.sigcar.dominio.Documento.setCorrecao(java.util.List))) && this(object$rac) && args(correcao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Documento.setCorrecao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", line 145, character 34 (br.com.sigcar.dominio.Documento.java:145), and \nby method br.com.sigcar.dominio.Documento.setCorrecao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'this.correcao\' is "+object$rac.correcao+"\n\t\'correcao\' is "+correcao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setCorrecao regarding specifications at \nline 145, character 34 (br.com.sigcar.dominio.Documento.java:145)"+", when \n"+"\t\'this.correcao\' is "+object$rac.correcao+"\n\t\'correcao\' is "+correcao+"\nCaused by: ";
       if ((correcao != null)){
         try {
           rac$b = (object$rac.correcao == correcao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCorrecao(java.util.List)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setCorrecao. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.util.List correcao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Documento.setCorrecao(java.util.List))) && this(object$rac) && args(correcao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCorrecao(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (correcao != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setCorrecao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.setCorrecao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCorrecao(java.util.List)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method hashCode. */
  after (final br.com.sigcar.dominio.Documento object$rac) throwing (Throwable rac$e) :
     (execution(int br.com.sigcar.dominio.Documento.hashCode())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".hashCode()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.hashCode\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.hashCode regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 159 (br.com.sigcar.dominio.Documento.java:159)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".hashCode()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method equals. */
  after (final br.com.sigcar.dominio.Documento object$rac, final java.lang.Object obj) throwing (Throwable rac$e) :
     (execution(boolean br.com.sigcar.dominio.Documento.equals(java.lang.Object))) && this(object$rac) && args(obj) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".equals(java.lang.Object)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.equals\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Documento.equals regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\", line 188 (br.com.sigcar.dominio.Documento.java:188)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".equals(java.lang.Object)", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method setArquivoBase64. */
  before (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String arquivoBase64) :
     (execution(void br.com.sigcar.dominio.Documento.setArquivoBase64(java.lang.String))) && 
     this(object$rac) && args(arquivoBase64) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setArquivoBase64 regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 53, character 38 (br.com.sigcar.dominio.Documento.java:53), and \nby method br.com.sigcar.dominio.Documento.setArquivoBase64 regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'arquivoBase64\' is "+arquivoBase64;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setArquivoBase64 regarding specifications at \n[spec-case]: line 53, character 38 (br.com.sigcar.dominio.Documento.java:53)"+", when \n"+"\t\'arquivoBase64\' is "+arquivoBase64+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (arquivoBase64 != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setExtensao. */
  before (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String extensao) :
     (execution(void br.com.sigcar.dominio.Documento.setExtensao(java.lang.String))) && 
     this(object$rac) && args(extensao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setExtensao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 65, character 33 (br.com.sigcar.dominio.Documento.java:65), and \nby method br.com.sigcar.dominio.Documento.setExtensao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'extensao\' is "+extensao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setExtensao regarding specifications at \n[spec-case]: line 65, character 33 (br.com.sigcar.dominio.Documento.java:65)"+", when \n"+"\t\'extensao\' is "+extensao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (extensao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setExtensao(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setArquivoBase64Original. */
  before (final br.com.sigcar.dominio.Documento object$rac, final byte[] arquivoBase64Original) :
     (execution(void br.com.sigcar.dominio.Documento.setArquivoBase64Original(byte[]))) && 
     this(object$rac) && args(arquivoBase64Original) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setArquivoBase64Original regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 75, character 46 (br.com.sigcar.dominio.Documento.java:75), and \nby method br.com.sigcar.dominio.Documento.setArquivoBase64Original regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'arquivoBase64Original\' is "+arquivoBase64Original;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setArquivoBase64Original regarding specifications at \n[spec-case]: line 75, character 46 (br.com.sigcar.dominio.Documento.java:75)"+", when \n"+"\t\'arquivoBase64Original\' is "+arquivoBase64Original+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (arquivoBase64Original != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setArquivoBase64Original(byte[])");

     }

  /** Generated by AspectJML to check the precondition of
   * method setId. */
  before (final br.com.sigcar.dominio.Documento object$rac, final int id) :
     (execution(void br.com.sigcar.dominio.Documento.setId(int))) && 
     this(object$rac) && args(id) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setId regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 86, character 26 (br.com.sigcar.dominio.Documento.java:86), and \nby method br.com.sigcar.dominio.Documento.setId regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'id\' is "+id;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setId regarding specifications at \n[spec-case]: line 86, character 26 (br.com.sigcar.dominio.Documento.java:86)"+", when \n"+"\t\'id\' is "+id+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (id > 0);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setObservacao. */
  before (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String observacao) :
     (execution(void br.com.sigcar.dominio.Documento.setObservacao(java.lang.String))) && 
     this(object$rac) && args(observacao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setObservacao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 98, character 35 (br.com.sigcar.dominio.Documento.java:98), and \nby method br.com.sigcar.dominio.Documento.setObservacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'observacao\' is "+observacao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setObservacao regarding specifications at \n[spec-case]: line 98, character 35 (br.com.sigcar.dominio.Documento.java:98)"+", when \n"+"\t\'observacao\' is "+observacao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (observacao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setObservacao(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setNome. */
  before (final br.com.sigcar.dominio.Documento object$rac, final java.lang.String nome) :
     (execution(void br.com.sigcar.dominio.Documento.setNome(java.lang.String))) && 
     this(object$rac) && args(nome) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setNome regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 109, character 29 (br.com.sigcar.dominio.Documento.java:109), and \nby method br.com.sigcar.dominio.Documento.setNome regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'nome\' is "+nome;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setNome regarding specifications at \n[spec-case]: line 109, character 29 (br.com.sigcar.dominio.Documento.java:109)"+", when \n"+"\t\'nome\' is "+nome+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (nome != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setStatus. */
  before (final br.com.sigcar.dominio.Documento object$rac, final br.com.sigcar.enums.StatusDocumento status) :
     (execution(void br.com.sigcar.dominio.Documento.setStatus(br.com.sigcar.enums.StatusDocumento))) && 
     this(object$rac) && args(status) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setStatus regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 120, character 31 (br.com.sigcar.dominio.Documento.java:120), and \nby method br.com.sigcar.dominio.Documento.setStatus regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'status\' is "+status;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setStatus regarding specifications at \n[spec-case]: line 120, character 31 (br.com.sigcar.dominio.Documento.java:120)"+", when \n"+"\t\'status\' is "+status+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (status != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(br.com.sigcar.enums.StatusDocumento)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setContestacao. */
  before (final br.com.sigcar.dominio.Documento object$rac, final java.util.List contestacao) :
     (execution(void br.com.sigcar.dominio.Documento.setContestacao(java.util.List))) && 
     this(object$rac) && args(contestacao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setContestacao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 131, character 36 (br.com.sigcar.dominio.Documento.java:131), and \nby method br.com.sigcar.dominio.Documento.setContestacao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'contestacao\' is "+contestacao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setContestacao regarding specifications at \n[spec-case]: line 131, character 36 (br.com.sigcar.dominio.Documento.java:131)"+", when \n"+"\t\'contestacao\' is "+contestacao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (contestacao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setContestacao(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setCorrecao. */
  before (final br.com.sigcar.dominio.Documento object$rac, final java.util.List correcao) :
     (execution(void br.com.sigcar.dominio.Documento.setCorrecao(java.util.List))) && 
     this(object$rac) && args(correcao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Documento.setCorrecao regarding specifications at \nFile \"br.com.sigcar.dominio.Documento.java\", [spec-case]: line 143, character 33 (br.com.sigcar.dominio.Documento.java:143), and \nby method br.com.sigcar.dominio.Documento.setCorrecao regarding code at \nFile \"br.com.sigcar.dominio.Documento.java\""+", when \n"+"\t\'correcao\' is "+correcao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Documento.java\" by method br.com.sigcar.dominio.Documento.setCorrecao regarding specifications at \n[spec-case]: line 143, character 33 (br.com.sigcar.dominio.Documento.java:143)"+", when \n"+"\t\'correcao\' is "+correcao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (correcao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCorrecao(java.util.List)");

     }


}

import br.com.sigcar.dominio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_dominio_Funcionario$44323e53_001a_433a_b1e0_4a0231f68a8a {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;





  /** Generated by AspectJML to check the exceptional postcondition of
   * method Funcionario. */
  after (final br.com.sigcar.dominio.Funcionario object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.dominio.Funcionario.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.dominio.Funcionario.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Funcionario.<init> regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.dominio.Funcionario.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method Funcionario. */
  after (final br.com.sigcar.dominio.Funcionario object$rac, final java.lang.String login, final java.lang.String senha) throwing (Throwable rac$e) :
     execution(br.com.sigcar.dominio.Funcionario.new( java.lang.String, java.lang.String )) && this(object$rac) && args(login, senha) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.dominio.Funcionario.<init>(java.lang.String, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Funcionario.<init> regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.dominio.Funcionario.<init>(java.lang.String, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getDataAdmissao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac) throwing (Throwable rac$e) :
     (execution(java.util.Date br.com.sigcar.dominio.Funcionario.getDataAdmissao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDataAdmissao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.getDataAdmissao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Funcionario.getDataAdmissao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\", line 26 (br.com.sigcar.dominio.Funcionario.java:26)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDataAdmissao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setDataAdmissao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac, final java.util.Date dataAdmissao) returning () :
     (execution(void br.com.sigcar.dominio.Funcionario.setDataAdmissao(java.util.Date))) && this(object$rac) && args(dataAdmissao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nFile \"br.com.sigcar.dominio.Funcionario.java\", line 30, character 38 (br.com.sigcar.dominio.Funcionario.java:30), and \nby method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+", when \n"+"\t\'this.dataAdmissao\' is "+object$rac.dataAdmissao+"\n\t\'dataAdmissao\' is "+dataAdmissao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nline 30, character 38 (br.com.sigcar.dominio.Funcionario.java:30)"+", when \n"+"\t\'this.dataAdmissao\' is "+object$rac.dataAdmissao+"\n\t\'dataAdmissao\' is "+dataAdmissao+"\nCaused by: ";
       if ((dataAdmissao != null)){
         try {
           rac$b = (object$rac.dataAdmissao == dataAdmissao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.util.Date)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setDataAdmissao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac, final java.util.Date dataAdmissao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Funcionario.setDataAdmissao(java.util.Date))) && this(object$rac) && args(dataAdmissao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.util.Date)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (dataAdmissao != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setDataAdmissao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.util.Date)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method setDataAdmissao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac, final java.lang.String dataAdmissao) returning () :
     (execution(void br.com.sigcar.dominio.Funcionario.setDataAdmissao(java.lang.String))) && this(object$rac) && args(dataAdmissao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nFile \"br.com.sigcar.dominio.Funcionario.java\", line 37, character 38 (br.com.sigcar.dominio.Funcionario.java:37), and \nby method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+", when \n"+"\t\'this.dataAdmissao\' is "+object$rac.dataAdmissao+"\n\t\'dataAdmissao\' is "+dataAdmissao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nline 37, character 38 (br.com.sigcar.dominio.Funcionario.java:37)"+", when \n"+"\t\'this.dataAdmissao\' is "+object$rac.dataAdmissao+"\n\t\'dataAdmissao\' is "+dataAdmissao+"\nCaused by: ";
       if ((dataAdmissao != null)){
         try {
           rac$b = (object$rac.dataAdmissao == dataAdmissao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setDataAdmissao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac, final java.lang.String dataAdmissao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Funcionario.setDataAdmissao(java.lang.String))) && this(object$rac) && args(dataAdmissao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (dataAdmissao != null)) {
  		     if (rac$e instanceof java.lang.Throwable) {
  			   java.lang.Throwable jml$ex = (java.lang.Throwable) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.text.ParseException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nline 36, character 23 (br.com.sigcar.dominio.Funcionario.java:36)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nline 36, character 23 (br.com.sigcar.dominio.Funcionario.java:36)"+", and \n"+"by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getFuncao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Funcionario.getFuncao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFuncao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.getFuncao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Funcionario.getFuncao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\", line 46 (br.com.sigcar.dominio.Funcionario.java:46)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFuncao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setFuncao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac, final java.lang.String funcao) returning () :
     (execution(void br.com.sigcar.dominio.Funcionario.setFuncao(java.lang.String))) && this(object$rac) && args(funcao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Funcionario.setFuncao regarding specifications at \nFile \"br.com.sigcar.dominio.Funcionario.java\", line 49, character 32 (br.com.sigcar.dominio.Funcionario.java:49), and \nby method br.com.sigcar.dominio.Funcionario.setFuncao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+", when \n"+"\t\'this.funcao\' is "+object$rac.funcao+"\n\t\'funcao\' is "+funcao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setFuncao regarding specifications at \nline 49, character 32 (br.com.sigcar.dominio.Funcionario.java:49)"+", when \n"+"\t\'this.funcao\' is "+object$rac.funcao+"\n\t\'funcao\' is "+funcao+"\nCaused by: ";
       if ((funcao != null)){
         try {
           rac$b = (object$rac.funcao == funcao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setFuncao(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setFuncao. */
  after (final br.com.sigcar.dominio.Funcionario object$rac, final java.lang.String funcao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Funcionario.setFuncao(java.lang.String))) && this(object$rac) && args(funcao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setFuncao(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (funcao != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setFuncao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Funcionario.setFuncao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setFuncao(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the precondition of
   * method setDataAdmissao. */
  before (final br.com.sigcar.dominio.Funcionario object$rac, final java.util.Date dataAdmissao) :
     (execution(void br.com.sigcar.dominio.Funcionario.setDataAdmissao(java.util.Date))) && 
     this(object$rac) && args(dataAdmissao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nFile \"br.com.sigcar.dominio.Funcionario.java\", [spec-case]: line 28, character 37 (br.com.sigcar.dominio.Funcionario.java:28), and \nby method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+", when \n"+"\t\'dataAdmissao\' is "+dataAdmissao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \n[spec-case]: line 28, character 37 (br.com.sigcar.dominio.Funcionario.java:28)"+", when \n"+"\t\'dataAdmissao\' is "+dataAdmissao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (dataAdmissao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.util.Date)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setDataAdmissao. */
  before (final br.com.sigcar.dominio.Funcionario object$rac, final java.lang.String dataAdmissao) :
     (execution(void br.com.sigcar.dominio.Funcionario.setDataAdmissao(java.lang.String))) && 
     this(object$rac) && args(dataAdmissao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \nFile \"br.com.sigcar.dominio.Funcionario.java\", [spec-case]: line 35, character 37 (br.com.sigcar.dominio.Funcionario.java:35), and \nby method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+", when \n"+"\t\'dataAdmissao\' is "+dataAdmissao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setDataAdmissao regarding specifications at \n[spec-case]: line 35, character 37 (br.com.sigcar.dominio.Funcionario.java:35)"+", when \n"+"\t\'dataAdmissao\' is "+dataAdmissao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (dataAdmissao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataAdmissao(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setFuncao. */
  before (final br.com.sigcar.dominio.Funcionario object$rac, final java.lang.String funcao) :
     (execution(void br.com.sigcar.dominio.Funcionario.setFuncao(java.lang.String))) && 
     this(object$rac) && args(funcao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Funcionario.setFuncao regarding specifications at \nFile \"br.com.sigcar.dominio.Funcionario.java\", [spec-case]: line 47, character 31 (br.com.sigcar.dominio.Funcionario.java:47), and \nby method br.com.sigcar.dominio.Funcionario.setFuncao regarding code at \nFile \"br.com.sigcar.dominio.Funcionario.java\""+", when \n"+"\t\'funcao\' is "+funcao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Funcionario.java\" by method br.com.sigcar.dominio.Funcionario.setFuncao regarding specifications at \n[spec-case]: line 47, character 31 (br.com.sigcar.dominio.Funcionario.java:47)"+", when \n"+"\t\'funcao\' is "+funcao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (funcao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setFuncao(java.lang.String)");

     }


}

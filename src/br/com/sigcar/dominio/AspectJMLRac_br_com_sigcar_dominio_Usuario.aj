import br.com.sigcar.dominio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_dominio_Usuario$08d7e8c7_dc09_4eec_9c12_22c5117e3f89 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;




















  /** Generated by AspectJML to check the exceptional postcondition of
   * method Usuario. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.dominio.Usuario.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.dominio.Usuario.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.<init> regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.dominio.Usuario.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method Usuario. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String login, final java.lang.String senha) returning () :
     execution(br.com.sigcar.dominio.Usuario.new( java.lang.String, java.lang.String )) && this(object$rac) && args(login, senha) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.<init> regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 34, character 31 (br.com.sigcar.dominio.Usuario.java:34), and \nby method br.com.sigcar.dominio.Usuario.<init> regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.login\' is "+object$rac.login+"\n\t\'this.senha\' is "+object$rac.senha+"\n\t\'login\' is "+login+"\n\t\'senha\' is "+senha;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.<init> regarding specifications at \nline 34, character 31 (br.com.sigcar.dominio.Usuario.java:34)"+", when \n"+"\t\'this.login\' is "+object$rac.login+"\n\t\'this.senha\' is "+object$rac.senha+"\n\t\'login\' is "+login+"\n\t\'senha\' is "+senha+"\nCaused by: ";
       if (((login != null) && (senha != null))){
         try {
           rac$b = ((object$rac.login == login) && (object$rac.senha == senha));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "br.com.sigcar.dominio.Usuario.<init>(java.lang.String, java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method Usuario. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String login, final java.lang.String senha) throwing (Throwable rac$e) :
     execution(br.com.sigcar.dominio.Usuario.new( java.lang.String, java.lang.String )) && this(object$rac) && args(login, senha) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.dominio.Usuario.<init>(java.lang.String, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((login != null) && (senha != null))) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.<init> regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.dominio.Usuario.<init>(java.lang.String, java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getDataCadastro. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.util.Date br.com.sigcar.dominio.Usuario.getDataCadastro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDataCadastro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getDataCadastro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getDataCadastro regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 41 (br.com.sigcar.dominio.Usuario.java:41)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDataCadastro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setDataCadastro. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.util.Date dataCadastro) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setDataCadastro(java.util.Date))) && this(object$rac) && args(dataCadastro) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setDataCadastro regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 45, character 38 (br.com.sigcar.dominio.Usuario.java:45), and \nby method br.com.sigcar.dominio.Usuario.setDataCadastro regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.dataCadastro\' is "+object$rac.dataCadastro+"\n\t\'dataCadastro\' is "+dataCadastro;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setDataCadastro regarding specifications at \nline 45, character 38 (br.com.sigcar.dominio.Usuario.java:45)"+", when \n"+"\t\'this.dataCadastro\' is "+object$rac.dataCadastro+"\n\t\'dataCadastro\' is "+dataCadastro+"\nCaused by: ";
       if ((dataCadastro != null)){
         try {
           rac$b = (object$rac.dataCadastro == dataCadastro);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataCadastro(java.util.Date)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setDataCadastro. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.util.Date dataCadastro) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setDataCadastro(java.util.Date))) && this(object$rac) && args(dataCadastro) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataCadastro(java.util.Date)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (dataCadastro != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setDataCadastro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setDataCadastro regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataCadastro(java.util.Date)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getId. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(int br.com.sigcar.dominio.Usuario.getId())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getId()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getId\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getId regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 52 (br.com.sigcar.dominio.Usuario.java:52)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getId()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setId. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final int id) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setId(int))) && this(object$rac) && args(id) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setId regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 56, character 28 (br.com.sigcar.dominio.Usuario.java:56), and \nby method br.com.sigcar.dominio.Usuario.setId regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.id\' is "+object$rac.id+"\n\t\'id\' is "+id;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setId regarding specifications at \nline 56, character 28 (br.com.sigcar.dominio.Usuario.java:56)"+", when \n"+"\t\'this.id\' is "+object$rac.id+"\n\t\'id\' is "+id+"\nCaused by: ";
       if ((id > 0)){
         try {
           rac$b = (object$rac.id == id);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setId. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final int id) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setId(int))) && this(object$rac) && args(id) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (id > 0)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setId\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setId regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getLogin. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Usuario.getLogin())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLogin()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getLogin\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getLogin regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 63 (br.com.sigcar.dominio.Usuario.java:63)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLogin()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setLogin. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String login) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setLogin(java.lang.String))) && this(object$rac) && args(login) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setLogin regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 67, character 31 (br.com.sigcar.dominio.Usuario.java:67), and \nby method br.com.sigcar.dominio.Usuario.setLogin regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.login\' is "+object$rac.login+"\n\t\'login\' is "+login;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setLogin regarding specifications at \nline 67, character 31 (br.com.sigcar.dominio.Usuario.java:67)"+", when \n"+"\t\'this.login\' is "+object$rac.login+"\n\t\'login\' is "+login+"\nCaused by: ";
       if ((login != null)){
         try {
           rac$b = (object$rac.login == login);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogin(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setLogin. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String login) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setLogin(java.lang.String))) && this(object$rac) && args(login) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogin(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (login != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setLogin\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setLogin regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogin(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getSenha. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Usuario.getSenha())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSenha()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getSenha\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getSenha regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 74 (br.com.sigcar.dominio.Usuario.java:74)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSenha()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setSenha. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String senha) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setSenha(java.lang.String))) && this(object$rac) && args(senha) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setSenha regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 78, character 31 (br.com.sigcar.dominio.Usuario.java:78), and \nby method br.com.sigcar.dominio.Usuario.setSenha regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.senha\' is "+object$rac.senha+"\n\t\'senha\' is "+senha;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setSenha regarding specifications at \nline 78, character 31 (br.com.sigcar.dominio.Usuario.java:78)"+", when \n"+"\t\'this.senha\' is "+object$rac.senha+"\n\t\'senha\' is "+senha+"\nCaused by: ";
       if ((senha != null)){
         try {
           rac$b = (object$rac.senha == senha);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setSenha(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setSenha. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String senha) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setSenha(java.lang.String))) && this(object$rac) && args(senha) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setSenha(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (senha != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setSenha\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setSenha regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setSenha(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getNome. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Usuario.getNome())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getNome\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getNome regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 85 (br.com.sigcar.dominio.Usuario.java:85)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getNome()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setNome. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String nome) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setNome(java.lang.String))) && this(object$rac) && args(nome) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setNome regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 88, character 30 (br.com.sigcar.dominio.Usuario.java:88), and \nby method br.com.sigcar.dominio.Usuario.setNome regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.nome\' is "+object$rac.nome+"\n\t\'nome\' is "+nome;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setNome regarding specifications at \nline 88, character 30 (br.com.sigcar.dominio.Usuario.java:88)"+", when \n"+"\t\'this.nome\' is "+object$rac.nome+"\n\t\'nome\' is "+nome+"\nCaused by: ";
       if ((nome != null)){
         try {
           rac$b = (object$rac.nome == nome);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setNome. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String nome) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setNome(java.lang.String))) && this(object$rac) && args(nome) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (nome != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setNome\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setNome regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCpf. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Usuario.getCpf())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCpf()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getCpf\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getCpf regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 96 (br.com.sigcar.dominio.Usuario.java:96)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCpf()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setCpf. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String cpf) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setCpf(java.lang.String))) && this(object$rac) && args(cpf) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setCpf regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 99, character 29 (br.com.sigcar.dominio.Usuario.java:99), and \nby method br.com.sigcar.dominio.Usuario.setCpf regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.cpf\' is "+object$rac.cpf+"\n\t\'this.login\' is "+object$rac.login+"\n\t\'cpf\' is "+cpf;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setCpf regarding specifications at \nline 99, character 29 (br.com.sigcar.dominio.Usuario.java:99)"+", when \n"+"\t\'this.cpf\' is "+object$rac.cpf+"\n\t\'this.login\' is "+object$rac.login+"\n\t\'cpf\' is "+cpf+"\nCaused by: ";
       if ((cpf != null)){
         try {
           rac$b = ((object$rac.cpf == cpf) && (object$rac.login == cpf));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCpf(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setCpf. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String cpf) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setCpf(java.lang.String))) && this(object$rac) && args(cpf) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCpf(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (cpf != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setCpf\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setCpf regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCpf(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getEmail. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Usuario.getEmail())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getEmail()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getEmail\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getEmail regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 107 (br.com.sigcar.dominio.Usuario.java:107)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getEmail()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setEmail. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String email) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setEmail(java.lang.String))) && this(object$rac) && args(email) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setEmail regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 110, character 31 (br.com.sigcar.dominio.Usuario.java:110), and \nby method br.com.sigcar.dominio.Usuario.setEmail regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.email\' is "+object$rac.email+"\n\t\'email\' is "+email;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setEmail regarding specifications at \nline 110, character 31 (br.com.sigcar.dominio.Usuario.java:110)"+", when \n"+"\t\'this.email\' is "+object$rac.email+"\n\t\'email\' is "+email+"\nCaused by: ";
       if ((email != null)){
         try {
           rac$b = (object$rac.email == email);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setEmail(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setEmail. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String email) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setEmail(java.lang.String))) && this(object$rac) && args(email) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setEmail(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (email != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setEmail\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setEmail regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setEmail(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getTelefone. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Usuario.getTelefone())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTelefone()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getTelefone\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getTelefone regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 117 (br.com.sigcar.dominio.Usuario.java:117)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTelefone()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setTelefone. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String telefone) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setTelefone(java.lang.String))) && this(object$rac) && args(telefone) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setTelefone regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 120, character 34 (br.com.sigcar.dominio.Usuario.java:120), and \nby method br.com.sigcar.dominio.Usuario.setTelefone regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.telefone\' is "+object$rac.telefone+"\n\t\'telefone\' is "+telefone;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setTelefone regarding specifications at \nline 120, character 34 (br.com.sigcar.dominio.Usuario.java:120)"+", when \n"+"\t\'this.telefone\' is "+object$rac.telefone+"\n\t\'telefone\' is "+telefone+"\nCaused by: ";
       if ((telefone != null)){
         try {
           rac$b = (object$rac.telefone == telefone);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTelefone(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setTelefone. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String telefone) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setTelefone(java.lang.String))) && this(object$rac) && args(telefone) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTelefone(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (telefone != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setTelefone\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setTelefone regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTelefone(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getPassaporte. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Usuario.getPassaporte())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPassaporte()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.getPassaporte\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.getPassaporte regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 127 (br.com.sigcar.dominio.Usuario.java:127)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPassaporte()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setPassaporte. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String passaporte) returning () :
     (execution(void br.com.sigcar.dominio.Usuario.setPassaporte(java.lang.String))) && this(object$rac) && args(passaporte) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Usuario.setPassaporte regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 130, character 36 (br.com.sigcar.dominio.Usuario.java:130), and \nby method br.com.sigcar.dominio.Usuario.setPassaporte regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'this.passaporte\' is "+object$rac.passaporte+"\n\t\'passaporte\' is "+passaporte;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setPassaporte regarding specifications at \nline 130, character 36 (br.com.sigcar.dominio.Usuario.java:130)"+", when \n"+"\t\'this.passaporte\' is "+object$rac.passaporte+"\n\t\'passaporte\' is "+passaporte+"\nCaused by: ";
       if ((passaporte != null)){
         try {
           rac$b = (object$rac.passaporte == passaporte);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPassaporte(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setPassaporte. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String passaporte) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Usuario.setPassaporte(java.lang.String))) && this(object$rac) && args(passaporte) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPassaporte(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (passaporte != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setPassaporte\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.setPassaporte regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPassaporte(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method hashCode. */
  after (final br.com.sigcar.dominio.Usuario object$rac) throwing (Throwable rac$e) :
     (execution(int br.com.sigcar.dominio.Usuario.hashCode())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".hashCode()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.hashCode\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.hashCode regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 149 (br.com.sigcar.dominio.Usuario.java:149)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".hashCode()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method equals. */
  after (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.Object obj) throwing (Throwable rac$e) :
     (execution(boolean br.com.sigcar.dominio.Usuario.equals(java.lang.Object))) && this(object$rac) && args(obj) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".equals(java.lang.Object)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.equals\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Usuario.equals regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\", line 203 (br.com.sigcar.dominio.Usuario.java:203)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".equals(java.lang.Object)", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method Usuario. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String login, final java.lang.String senha) :
     execution(br.com.sigcar.dominio.Usuario.new( java.lang.String, java.lang.String )) && 
     this(object$rac) && args(login, senha) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.<init> regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 32, character 30 (br.com.sigcar.dominio.Usuario.java:32), and \nby method br.com.sigcar.dominio.Usuario.<init> regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'login\' is "+login+"\n\t\'senha\' is "+senha;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.<init> regarding specifications at \n[spec-case]: line 32, character 30 (br.com.sigcar.dominio.Usuario.java:32)"+", when \n"+"\t\'login\' is "+login+"\n\t\'senha\' is "+senha+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((login != null) && (senha != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "br.com.sigcar.dominio.Usuario.<init>(java.lang.String, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setDataCadastro. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.util.Date dataCadastro) :
     (execution(void br.com.sigcar.dominio.Usuario.setDataCadastro(java.util.Date))) && 
     this(object$rac) && args(dataCadastro) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setDataCadastro regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 43, character 37 (br.com.sigcar.dominio.Usuario.java:43), and \nby method br.com.sigcar.dominio.Usuario.setDataCadastro regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'dataCadastro\' is "+dataCadastro;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setDataCadastro regarding specifications at \n[spec-case]: line 43, character 37 (br.com.sigcar.dominio.Usuario.java:43)"+", when \n"+"\t\'dataCadastro\' is "+dataCadastro+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (dataCadastro != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataCadastro(java.util.Date)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setId. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final int id) :
     (execution(void br.com.sigcar.dominio.Usuario.setId(int))) && 
     this(object$rac) && args(id) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setId regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 54, character 26 (br.com.sigcar.dominio.Usuario.java:54), and \nby method br.com.sigcar.dominio.Usuario.setId regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'id\' is "+id;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setId regarding specifications at \n[spec-case]: line 54, character 26 (br.com.sigcar.dominio.Usuario.java:54)"+", when \n"+"\t\'id\' is "+id+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (id > 0);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setLogin. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String login) :
     (execution(void br.com.sigcar.dominio.Usuario.setLogin(java.lang.String))) && 
     this(object$rac) && args(login) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setLogin regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 65, character 30 (br.com.sigcar.dominio.Usuario.java:65), and \nby method br.com.sigcar.dominio.Usuario.setLogin regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'login\' is "+login;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setLogin regarding specifications at \n[spec-case]: line 65, character 30 (br.com.sigcar.dominio.Usuario.java:65)"+", when \n"+"\t\'login\' is "+login+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (login != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogin(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setSenha. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String senha) :
     (execution(void br.com.sigcar.dominio.Usuario.setSenha(java.lang.String))) && 
     this(object$rac) && args(senha) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setSenha regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 76, character 30 (br.com.sigcar.dominio.Usuario.java:76), and \nby method br.com.sigcar.dominio.Usuario.setSenha regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'senha\' is "+senha;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setSenha regarding specifications at \n[spec-case]: line 76, character 30 (br.com.sigcar.dominio.Usuario.java:76)"+", when \n"+"\t\'senha\' is "+senha+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (senha != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setSenha(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setNome. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String nome) :
     (execution(void br.com.sigcar.dominio.Usuario.setNome(java.lang.String))) && 
     this(object$rac) && args(nome) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setNome regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 86, character 29 (br.com.sigcar.dominio.Usuario.java:86), and \nby method br.com.sigcar.dominio.Usuario.setNome regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'nome\' is "+nome;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setNome regarding specifications at \n[spec-case]: line 86, character 29 (br.com.sigcar.dominio.Usuario.java:86)"+", when \n"+"\t\'nome\' is "+nome+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (nome != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNome(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setCpf. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String cpf) :
     (execution(void br.com.sigcar.dominio.Usuario.setCpf(java.lang.String))) && 
     this(object$rac) && args(cpf) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setCpf regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 97, character 28 (br.com.sigcar.dominio.Usuario.java:97), and \nby method br.com.sigcar.dominio.Usuario.setCpf regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'cpf\' is "+cpf;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setCpf regarding specifications at \n[spec-case]: line 97, character 28 (br.com.sigcar.dominio.Usuario.java:97)"+", when \n"+"\t\'cpf\' is "+cpf+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cpf != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCpf(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setEmail. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String email) :
     (execution(void br.com.sigcar.dominio.Usuario.setEmail(java.lang.String))) && 
     this(object$rac) && args(email) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setEmail regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 108, character 30 (br.com.sigcar.dominio.Usuario.java:108), and \nby method br.com.sigcar.dominio.Usuario.setEmail regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'email\' is "+email;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setEmail regarding specifications at \n[spec-case]: line 108, character 30 (br.com.sigcar.dominio.Usuario.java:108)"+", when \n"+"\t\'email\' is "+email+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (email != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setEmail(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setTelefone. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String telefone) :
     (execution(void br.com.sigcar.dominio.Usuario.setTelefone(java.lang.String))) && 
     this(object$rac) && args(telefone) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setTelefone regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 118, character 33 (br.com.sigcar.dominio.Usuario.java:118), and \nby method br.com.sigcar.dominio.Usuario.setTelefone regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'telefone\' is "+telefone;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setTelefone regarding specifications at \n[spec-case]: line 118, character 33 (br.com.sigcar.dominio.Usuario.java:118)"+", when \n"+"\t\'telefone\' is "+telefone+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (telefone != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTelefone(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setPassaporte. */
  before (final br.com.sigcar.dominio.Usuario object$rac, final java.lang.String passaporte) :
     (execution(void br.com.sigcar.dominio.Usuario.setPassaporte(java.lang.String))) && 
     this(object$rac) && args(passaporte) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Usuario.setPassaporte regarding specifications at \nFile \"br.com.sigcar.dominio.Usuario.java\", [spec-case]: line 128, character 35 (br.com.sigcar.dominio.Usuario.java:128), and \nby method br.com.sigcar.dominio.Usuario.setPassaporte regarding code at \nFile \"br.com.sigcar.dominio.Usuario.java\""+", when \n"+"\t\'passaporte\' is "+passaporte;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Usuario.java\" by method br.com.sigcar.dominio.Usuario.setPassaporte regarding specifications at \n[spec-case]: line 128, character 35 (br.com.sigcar.dominio.Usuario.java:128)"+", when \n"+"\t\'passaporte\' is "+passaporte+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (passaporte != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPassaporte(java.lang.String)");

     }


}

import br.com.sigcar.dominio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_dominio_Endereco$61068227_1038_4ecc_959f_8758ce4554ea {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;


















  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCep. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getCep())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCep()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getCep\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getCep regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 16 (br.com.sigcar.dominio.Endereco.java:16)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCep()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setCep. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String cep) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setCep(java.lang.String))) && this(object$rac) && args(cep) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setCep regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 19, character 29 (br.com.sigcar.dominio.Endereco.java:19), and \nby method br.com.sigcar.dominio.Endereco.setCep regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.cep\' is "+object$rac.cep+"\n\t\'cep\' is "+cep;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setCep regarding specifications at \nline 19, character 29 (br.com.sigcar.dominio.Endereco.java:19)"+", when \n"+"\t\'this.cep\' is "+object$rac.cep+"\n\t\'cep\' is "+cep+"\nCaused by: ";
       if ((cep != null)){
         try {
           rac$b = (object$rac.cep == cep);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCep(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setCep. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String cep) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setCep(java.lang.String))) && this(object$rac) && args(cep) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCep(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (cep != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setCep\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setCep regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCep(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getLogradouro. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getLogradouro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLogradouro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getLogradouro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getLogradouro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 26 (br.com.sigcar.dominio.Endereco.java:26)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLogradouro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setLogradouro. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String logradouro) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setLogradouro(java.lang.String))) && this(object$rac) && args(logradouro) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setLogradouro regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 29, character 36 (br.com.sigcar.dominio.Endereco.java:29), and \nby method br.com.sigcar.dominio.Endereco.setLogradouro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.logradouro\' is "+object$rac.logradouro+"\n\t\'logradouro\' is "+logradouro;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setLogradouro regarding specifications at \nline 29, character 36 (br.com.sigcar.dominio.Endereco.java:29)"+", when \n"+"\t\'this.logradouro\' is "+object$rac.logradouro+"\n\t\'logradouro\' is "+logradouro+"\nCaused by: ";
       if ((logradouro != null)){
         try {
           rac$b = (object$rac.logradouro == logradouro);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogradouro(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setLogradouro. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String logradouro) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setLogradouro(java.lang.String))) && this(object$rac) && args(logradouro) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogradouro(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (logradouro != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setLogradouro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setLogradouro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogradouro(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getComplemento. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getComplemento())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getComplemento()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getComplemento\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getComplemento regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 35 (br.com.sigcar.dominio.Endereco.java:35)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getComplemento()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setComplemento. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String complemento) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setComplemento(java.lang.String))) && this(object$rac) && args(complemento) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setComplemento regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 38, character 37 (br.com.sigcar.dominio.Endereco.java:38), and \nby method br.com.sigcar.dominio.Endereco.setComplemento regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.complemento\' is "+object$rac.complemento+"\n\t\'complemento\' is "+complemento;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setComplemento regarding specifications at \nline 38, character 37 (br.com.sigcar.dominio.Endereco.java:38)"+", when \n"+"\t\'this.complemento\' is "+object$rac.complemento+"\n\t\'complemento\' is "+complemento+"\nCaused by: ";
       if ((complemento != null)){
         try {
           rac$b = (object$rac.complemento == complemento);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setComplemento(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setComplemento. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String complemento) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setComplemento(java.lang.String))) && this(object$rac) && args(complemento) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setComplemento(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (complemento != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setComplemento\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setComplemento regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setComplemento(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getBairro. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getBairro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getBairro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getBairro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getBairro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 44 (br.com.sigcar.dominio.Endereco.java:44)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getBairro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setBairro. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String bairro) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setBairro(java.lang.String))) && this(object$rac) && args(bairro) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setBairro regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 47, character 32 (br.com.sigcar.dominio.Endereco.java:47), and \nby method br.com.sigcar.dominio.Endereco.setBairro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.bairro\' is "+object$rac.bairro+"\n\t\'bairro\' is "+bairro;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setBairro regarding specifications at \nline 47, character 32 (br.com.sigcar.dominio.Endereco.java:47)"+", when \n"+"\t\'this.bairro\' is "+object$rac.bairro+"\n\t\'bairro\' is "+bairro+"\nCaused by: ";
       if ((bairro != null)){
         try {
           rac$b = (object$rac.bairro == bairro);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setBairro(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setBairro. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String bairro) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setBairro(java.lang.String))) && this(object$rac) && args(bairro) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setBairro(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (bairro != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setBairro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setBairro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setBairro(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getLocalidade. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getLocalidade())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLocalidade()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getLocalidade\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getLocalidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 53 (br.com.sigcar.dominio.Endereco.java:53)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLocalidade()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setLocalidade. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String localidade) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setLocalidade(java.lang.String))) && this(object$rac) && args(localidade) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setLocalidade regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 56, character 36 (br.com.sigcar.dominio.Endereco.java:56), and \nby method br.com.sigcar.dominio.Endereco.setLocalidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.localidade\' is "+object$rac.localidade+"\n\t\'localidade\' is "+localidade;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setLocalidade regarding specifications at \nline 56, character 36 (br.com.sigcar.dominio.Endereco.java:56)"+", when \n"+"\t\'this.localidade\' is "+object$rac.localidade+"\n\t\'localidade\' is "+localidade+"\nCaused by: ";
       if ((localidade != null)){
         try {
           rac$b = (object$rac.localidade == localidade);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLocalidade(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setLocalidade. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String localidade) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setLocalidade(java.lang.String))) && this(object$rac) && args(localidade) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLocalidade(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (localidade != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setLocalidade\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setLocalidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLocalidade(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getUf. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getUf())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUf()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getUf\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getUf regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 62 (br.com.sigcar.dominio.Endereco.java:62)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUf()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setUf. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String uf) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setUf(java.lang.String))) && this(object$rac) && args(uf) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setUf regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 66, character 28 (br.com.sigcar.dominio.Endereco.java:66), and \nby method br.com.sigcar.dominio.Endereco.setUf regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.uf\' is "+object$rac.uf+"\n\t\'uf\' is "+uf;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setUf regarding specifications at \nline 66, character 28 (br.com.sigcar.dominio.Endereco.java:66)"+", when \n"+"\t\'this.uf\' is "+object$rac.uf+"\n\t\'uf\' is "+uf+"\nCaused by: ";
       if ((uf != null)){
         try {
           rac$b = (object$rac.uf == uf);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUf(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setUf. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String uf) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setUf(java.lang.String))) && this(object$rac) && args(uf) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUf(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (uf != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setUf\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setUf regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUf(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getUnidade. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getUnidade())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUnidade()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getUnidade\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getUnidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 72 (br.com.sigcar.dominio.Endereco.java:72)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUnidade()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setUnidade. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String unidade) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setUnidade(java.lang.String))) && this(object$rac) && args(unidade) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setUnidade regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 76, character 33 (br.com.sigcar.dominio.Endereco.java:76), and \nby method br.com.sigcar.dominio.Endereco.setUnidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.unidade\' is "+object$rac.unidade+"\n\t\'unidade\' is "+unidade;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setUnidade regarding specifications at \nline 76, character 33 (br.com.sigcar.dominio.Endereco.java:76)"+", when \n"+"\t\'this.unidade\' is "+object$rac.unidade+"\n\t\'unidade\' is "+unidade+"\nCaused by: ";
       if ((unidade != null)){
         try {
           rac$b = (object$rac.unidade == unidade);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUnidade(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setUnidade. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String unidade) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setUnidade(java.lang.String))) && this(object$rac) && args(unidade) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUnidade(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (unidade != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setUnidade\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setUnidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUnidade(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getIbge. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getIbge())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getIbge()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getIbge\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getIbge regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 82 (br.com.sigcar.dominio.Endereco.java:82)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getIbge()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setIbge. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String ibge) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setIbge(java.lang.String))) && this(object$rac) && args(ibge) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setIbge regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 86, character 30 (br.com.sigcar.dominio.Endereco.java:86), and \nby method br.com.sigcar.dominio.Endereco.setIbge regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.ibge\' is "+object$rac.ibge+"\n\t\'ibge\' is "+ibge;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setIbge regarding specifications at \nline 86, character 30 (br.com.sigcar.dominio.Endereco.java:86)"+", when \n"+"\t\'this.ibge\' is "+object$rac.ibge+"\n\t\'ibge\' is "+ibge+"\nCaused by: ";
       if ((ibge != null)){
         try {
           rac$b = (object$rac.ibge == ibge);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setIbge(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setIbge. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String ibge) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setIbge(java.lang.String))) && this(object$rac) && args(ibge) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setIbge(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (ibge != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setIbge\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setIbge regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setIbge(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getGia. */
  after (final br.com.sigcar.dominio.Endereco object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Endereco.getGia())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getGia()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.getGia\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.getGia regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 92 (br.com.sigcar.dominio.Endereco.java:92)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getGia()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setGia. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String gia) returning () :
     (execution(void br.com.sigcar.dominio.Endereco.setGia(java.lang.String))) && this(object$rac) && args(gia) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Endereco.setGia regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", line 96, character 29 (br.com.sigcar.dominio.Endereco.java:96), and \nby method br.com.sigcar.dominio.Endereco.setGia regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'this.gia\' is "+object$rac.gia+"\n\t\'gia\' is "+gia;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setGia regarding specifications at \nline 96, character 29 (br.com.sigcar.dominio.Endereco.java:96)"+", when \n"+"\t\'this.gia\' is "+object$rac.gia+"\n\t\'gia\' is "+gia+"\nCaused by: ";
       if ((gia != null)){
         try {
           rac$b = (object$rac.gia == gia);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setGia(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setGia. */
  after (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String gia) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Endereco.setGia(java.lang.String))) && this(object$rac) && args(gia) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setGia(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (gia != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setGia\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Endereco.setGia regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setGia(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the precondition of
   * method setCep. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String cep) :
     (execution(void br.com.sigcar.dominio.Endereco.setCep(java.lang.String))) && 
     this(object$rac) && args(cep) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setCep regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 17, character 28 (br.com.sigcar.dominio.Endereco.java:17), and \nby method br.com.sigcar.dominio.Endereco.setCep regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'cep\' is "+cep;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setCep regarding specifications at \n[spec-case]: line 17, character 28 (br.com.sigcar.dominio.Endereco.java:17)"+", when \n"+"\t\'cep\' is "+cep+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cep != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCep(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setLogradouro. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String logradouro) :
     (execution(void br.com.sigcar.dominio.Endereco.setLogradouro(java.lang.String))) && 
     this(object$rac) && args(logradouro) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setLogradouro regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 27, character 35 (br.com.sigcar.dominio.Endereco.java:27), and \nby method br.com.sigcar.dominio.Endereco.setLogradouro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'logradouro\' is "+logradouro;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setLogradouro regarding specifications at \n[spec-case]: line 27, character 35 (br.com.sigcar.dominio.Endereco.java:27)"+", when \n"+"\t\'logradouro\' is "+logradouro+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (logradouro != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLogradouro(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setComplemento. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String complemento) :
     (execution(void br.com.sigcar.dominio.Endereco.setComplemento(java.lang.String))) && 
     this(object$rac) && args(complemento) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setComplemento regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 36, character 36 (br.com.sigcar.dominio.Endereco.java:36), and \nby method br.com.sigcar.dominio.Endereco.setComplemento regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'complemento\' is "+complemento;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setComplemento regarding specifications at \n[spec-case]: line 36, character 36 (br.com.sigcar.dominio.Endereco.java:36)"+", when \n"+"\t\'complemento\' is "+complemento+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (complemento != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setComplemento(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setBairro. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String bairro) :
     (execution(void br.com.sigcar.dominio.Endereco.setBairro(java.lang.String))) && 
     this(object$rac) && args(bairro) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setBairro regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 45, character 31 (br.com.sigcar.dominio.Endereco.java:45), and \nby method br.com.sigcar.dominio.Endereco.setBairro regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'bairro\' is "+bairro;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setBairro regarding specifications at \n[spec-case]: line 45, character 31 (br.com.sigcar.dominio.Endereco.java:45)"+", when \n"+"\t\'bairro\' is "+bairro+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (bairro != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setBairro(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setLocalidade. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String localidade) :
     (execution(void br.com.sigcar.dominio.Endereco.setLocalidade(java.lang.String))) && 
     this(object$rac) && args(localidade) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setLocalidade regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 54, character 35 (br.com.sigcar.dominio.Endereco.java:54), and \nby method br.com.sigcar.dominio.Endereco.setLocalidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'localidade\' is "+localidade;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setLocalidade regarding specifications at \n[spec-case]: line 54, character 35 (br.com.sigcar.dominio.Endereco.java:54)"+", when \n"+"\t\'localidade\' is "+localidade+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (localidade != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setLocalidade(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setUf. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String uf) :
     (execution(void br.com.sigcar.dominio.Endereco.setUf(java.lang.String))) && 
     this(object$rac) && args(uf) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setUf regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 64, character 27 (br.com.sigcar.dominio.Endereco.java:64), and \nby method br.com.sigcar.dominio.Endereco.setUf regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'uf\' is "+uf;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setUf regarding specifications at \n[spec-case]: line 64, character 27 (br.com.sigcar.dominio.Endereco.java:64)"+", when \n"+"\t\'uf\' is "+uf+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (uf != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUf(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setUnidade. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String unidade) :
     (execution(void br.com.sigcar.dominio.Endereco.setUnidade(java.lang.String))) && 
     this(object$rac) && args(unidade) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setUnidade regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 74, character 32 (br.com.sigcar.dominio.Endereco.java:74), and \nby method br.com.sigcar.dominio.Endereco.setUnidade regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'unidade\' is "+unidade;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setUnidade regarding specifications at \n[spec-case]: line 74, character 32 (br.com.sigcar.dominio.Endereco.java:74)"+", when \n"+"\t\'unidade\' is "+unidade+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (unidade != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUnidade(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setIbge. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String ibge) :
     (execution(void br.com.sigcar.dominio.Endereco.setIbge(java.lang.String))) && 
     this(object$rac) && args(ibge) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setIbge regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 84, character 29 (br.com.sigcar.dominio.Endereco.java:84), and \nby method br.com.sigcar.dominio.Endereco.setIbge regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'ibge\' is "+ibge;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setIbge regarding specifications at \n[spec-case]: line 84, character 29 (br.com.sigcar.dominio.Endereco.java:84)"+", when \n"+"\t\'ibge\' is "+ibge+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (ibge != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setIbge(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setGia. */
  before (final br.com.sigcar.dominio.Endereco object$rac, final java.lang.String gia) :
     (execution(void br.com.sigcar.dominio.Endereco.setGia(java.lang.String))) && 
     this(object$rac) && args(gia) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Endereco.setGia regarding specifications at \nFile \"br.com.sigcar.dominio.Endereco.java\", [spec-case]: line 94, character 28 (br.com.sigcar.dominio.Endereco.java:94), and \nby method br.com.sigcar.dominio.Endereco.setGia regarding code at \nFile \"br.com.sigcar.dominio.Endereco.java\""+", when \n"+"\t\'gia\' is "+gia;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Endereco.java\" by method br.com.sigcar.dominio.Endereco.setGia regarding specifications at \n[spec-case]: line 94, character 28 (br.com.sigcar.dominio.Endereco.java:94)"+", when \n"+"\t\'gia\' is "+gia+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (gia != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setGia(java.lang.String)");

     }


}

import br.com.sigcar.dominio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.Date;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import br.com.sigcar.enums.TipoServico;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_dominio_Servico$3185a77c_1e54_467f_bd6f_40839b254e69 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;

















  /** Generated by AspectJML to check the exceptional postcondition of
   * method Servico. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.dominio.Servico.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.dominio.Servico.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.<init> regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.dominio.Servico.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getId. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(int br.com.sigcar.dominio.Servico.getId())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getId()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.getId\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.getId regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 50 (br.com.sigcar.dominio.Servico.java:50)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getId()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setId. */
  after (final br.com.sigcar.dominio.Servico object$rac, final int id) returning () :
     (execution(void br.com.sigcar.dominio.Servico.setId(int))) && this(object$rac) && args(id) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Servico.setId regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", line 54, character 28 (br.com.sigcar.dominio.Servico.java:54), and \nby method br.com.sigcar.dominio.Servico.setId regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'this.id\' is "+object$rac.id+"\n\t\'id\' is "+id;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setId regarding specifications at \nline 54, character 28 (br.com.sigcar.dominio.Servico.java:54)"+", when \n"+"\t\'this.id\' is "+object$rac.id+"\n\t\'id\' is "+id+"\nCaused by: ";
       if ((id > 0)){
         try {
           rac$b = (object$rac.id == id);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setId. */
  after (final br.com.sigcar.dominio.Servico object$rac, final int id) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Servico.setId(int))) && this(object$rac) && args(id) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (id > 0)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setId\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.setId regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method isStatus. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(boolean br.com.sigcar.dominio.Servico.isStatus())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isStatus()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.isStatus\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.isStatus regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 61 (br.com.sigcar.dominio.Servico.java:61)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isStatus()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method isAtivo. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(boolean br.com.sigcar.dominio.Servico.isAtivo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isAtivo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.isAtivo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.isAtivo regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 65 (br.com.sigcar.dominio.Servico.java:65)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isAtivo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setStatus. */
  after (final br.com.sigcar.dominio.Servico object$rac, final boolean status) returning () :
     (execution(void br.com.sigcar.dominio.Servico.setStatus(boolean))) && this(object$rac) && args(status) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Servico.setStatus regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", line 69, character 32 (br.com.sigcar.dominio.Servico.java:69), and \nby method br.com.sigcar.dominio.Servico.setStatus regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'this.status\' is "+object$rac.status+"\n\t\'status\' is "+status;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setStatus regarding specifications at \nline 69, character 32 (br.com.sigcar.dominio.Servico.java:69)"+", when \n"+"\t\'this.status\' is "+object$rac.status+"\n\t\'status\' is "+status+"\nCaused by: ";
       if (true){
         try {
           rac$b = (object$rac.status == status);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(boolean)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setStatus. */
  after (final br.com.sigcar.dominio.Servico object$rac, final boolean status) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Servico.setStatus(boolean))) && this(object$rac) && args(status) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(boolean)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setStatus\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.setStatus regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(boolean)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getDataSolicitacao. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(java.util.Date br.com.sigcar.dominio.Servico.getDataSolicitacao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDataSolicitacao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.getDataSolicitacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.getDataSolicitacao regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 76 (br.com.sigcar.dominio.Servico.java:76)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDataSolicitacao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setDataSolicitacao. */
  after (final br.com.sigcar.dominio.Servico object$rac, final java.util.Date dataSolicitacao) returning () :
     (execution(void br.com.sigcar.dominio.Servico.setDataSolicitacao(java.util.Date))) && this(object$rac) && args(dataSolicitacao) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Servico.setDataSolicitacao regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", line 79, character 41 (br.com.sigcar.dominio.Servico.java:79), and \nby method br.com.sigcar.dominio.Servico.setDataSolicitacao regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'this.dataSolicitacao\' is "+object$rac.dataSolicitacao+"\n\t\'dataSolicitacao\' is "+dataSolicitacao;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setDataSolicitacao regarding specifications at \nline 79, character 41 (br.com.sigcar.dominio.Servico.java:79)"+", when \n"+"\t\'this.dataSolicitacao\' is "+object$rac.dataSolicitacao+"\n\t\'dataSolicitacao\' is "+dataSolicitacao+"\nCaused by: ";
       if ((dataSolicitacao != null)){
         try {
           rac$b = (object$rac.dataSolicitacao == dataSolicitacao);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataSolicitacao(java.util.Date)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setDataSolicitacao. */
  after (final br.com.sigcar.dominio.Servico object$rac, final java.util.Date dataSolicitacao) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Servico.setDataSolicitacao(java.util.Date))) && this(object$rac) && args(dataSolicitacao) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataSolicitacao(java.util.Date)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (dataSolicitacao != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setDataSolicitacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.setDataSolicitacao regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataSolicitacao(java.util.Date)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getNomeEntidade. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String br.com.sigcar.dominio.Servico.getNomeEntidade())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getNomeEntidade()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.getNomeEntidade\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.getNomeEntidade regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 87 (br.com.sigcar.dominio.Servico.java:87)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getNomeEntidade()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setNomeEntidade. */
  after (final br.com.sigcar.dominio.Servico object$rac, final java.lang.String nomeEntidade) returning () :
     (execution(void br.com.sigcar.dominio.Servico.setNomeEntidade(java.lang.String))) && this(object$rac) && args(nomeEntidade) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Servico.setNomeEntidade regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", line 91, character 38 (br.com.sigcar.dominio.Servico.java:91), and \nby method br.com.sigcar.dominio.Servico.setNomeEntidade regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'this.nomeEntidade\' is "+object$rac.nomeEntidade+"\n\t\'nomeEntidade\' is "+nomeEntidade;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setNomeEntidade regarding specifications at \nline 91, character 38 (br.com.sigcar.dominio.Servico.java:91)"+", when \n"+"\t\'this.nomeEntidade\' is "+object$rac.nomeEntidade+"\n\t\'nomeEntidade\' is "+nomeEntidade+"\nCaused by: ";
       if ((nomeEntidade != null)){
         try {
           rac$b = (object$rac.nomeEntidade == nomeEntidade);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNomeEntidade(java.lang.String)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setNomeEntidade. */
  after (final br.com.sigcar.dominio.Servico object$rac, final java.lang.String nomeEntidade) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Servico.setNomeEntidade(java.lang.String))) && this(object$rac) && args(nomeEntidade) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNomeEntidade(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (nomeEntidade != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setNomeEntidade\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.setNomeEntidade regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNomeEntidade(java.lang.String)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getUsuario. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(br.com.sigcar.dominio.Usuario br.com.sigcar.dominio.Servico.getUsuario())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUsuario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.getUsuario\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.getUsuario regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 98 (br.com.sigcar.dominio.Servico.java:98)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getUsuario()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setUsuario. */
  after (final br.com.sigcar.dominio.Servico object$rac, final br.com.sigcar.dominio.Usuario usuario) returning () :
     (execution(void br.com.sigcar.dominio.Servico.setUsuario(br.com.sigcar.dominio.Usuario))) && this(object$rac) && args(usuario) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Servico.setUsuario regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", line 102, character 33 (br.com.sigcar.dominio.Servico.java:102), and \nby method br.com.sigcar.dominio.Servico.setUsuario regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'this.usuario\' is "+object$rac.usuario+"\n\t\'usuario\' is "+usuario;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setUsuario regarding specifications at \nline 102, character 33 (br.com.sigcar.dominio.Servico.java:102)"+", when \n"+"\t\'this.usuario\' is "+object$rac.usuario+"\n\t\'usuario\' is "+usuario+"\nCaused by: ";
       if ((usuario != null)){
         try {
           rac$b = (object$rac.usuario == usuario);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUsuario(br.com.sigcar.dominio.Usuario)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setUsuario. */
  after (final br.com.sigcar.dominio.Servico object$rac, final br.com.sigcar.dominio.Usuario usuario) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Servico.setUsuario(br.com.sigcar.dominio.Usuario))) && this(object$rac) && args(usuario) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUsuario(br.com.sigcar.dominio.Usuario)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (usuario != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setUsuario\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.setUsuario regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUsuario(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getDocumentos. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(java.util.List br.com.sigcar.dominio.Servico.getDocumentos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDocumentos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.getDocumentos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.getDocumentos regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 109 (br.com.sigcar.dominio.Servico.java:109)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDocumentos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setDocumentos. */
  after (final br.com.sigcar.dominio.Servico object$rac, final java.util.List documentos) returning () :
     (execution(void br.com.sigcar.dominio.Servico.setDocumentos(java.util.List))) && this(object$rac) && args(documentos) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Servico.setDocumentos regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", line 113, character 36 (br.com.sigcar.dominio.Servico.java:113), and \nby method br.com.sigcar.dominio.Servico.setDocumentos regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'this.documentos\' is "+object$rac.documentos+"\n\t\'documentos\' is "+documentos;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setDocumentos regarding specifications at \nline 113, character 36 (br.com.sigcar.dominio.Servico.java:113)"+", when \n"+"\t\'this.documentos\' is "+object$rac.documentos+"\n\t\'documentos\' is "+documentos+"\nCaused by: ";
       if ((documentos != null)){
         try {
           rac$b = (object$rac.documentos == documentos);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDocumentos(java.util.List)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setDocumentos. */
  after (final br.com.sigcar.dominio.Servico object$rac, final java.util.List documentos) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Servico.setDocumentos(java.util.List))) && this(object$rac) && args(documentos) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDocumentos(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (documentos != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setDocumentos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.setDocumentos regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDocumentos(java.util.List)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getTipoServico. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(br.com.sigcar.enums.TipoServico br.com.sigcar.dominio.Servico.getTipoServico())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTipoServico()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.getTipoServico\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.getTipoServico regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 120 (br.com.sigcar.dominio.Servico.java:120)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTipoServico()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method setTipoServico. */
  after (final br.com.sigcar.dominio.Servico object$rac, final br.com.sigcar.enums.TipoServico tipoServico) returning () :
     (execution(void br.com.sigcar.dominio.Servico.setTipoServico(br.com.sigcar.enums.TipoServico))) && this(object$rac) && args(tipoServico) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.dominio.Servico.setTipoServico regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", line 124, character 37 (br.com.sigcar.dominio.Servico.java:124), and \nby method br.com.sigcar.dominio.Servico.setTipoServico regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'this.tipoServico\' is "+object$rac.tipoServico+"\n\t\'tipoServico\' is "+tipoServico;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setTipoServico regarding specifications at \nline 124, character 37 (br.com.sigcar.dominio.Servico.java:124)"+", when \n"+"\t\'this.tipoServico\' is "+object$rac.tipoServico+"\n\t\'tipoServico\' is "+tipoServico+"\nCaused by: ";
       if ((tipoServico != null)){
         try {
           rac$b = (object$rac.tipoServico == tipoServico);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTipoServico(br.com.sigcar.enums.TipoServico)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method setTipoServico. */
  after (final br.com.sigcar.dominio.Servico object$rac, final br.com.sigcar.enums.TipoServico tipoServico) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.dominio.Servico.setTipoServico(br.com.sigcar.enums.TipoServico))) && this(object$rac) && args(tipoServico) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTipoServico(br.com.sigcar.enums.TipoServico)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (tipoServico != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setTipoServico\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.setTipoServico regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTipoServico(br.com.sigcar.enums.TipoServico)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method hashCode. */
  after (final br.com.sigcar.dominio.Servico object$rac) throwing (Throwable rac$e) :
     (execution(int br.com.sigcar.dominio.Servico.hashCode())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".hashCode()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.hashCode\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.hashCode regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 141 (br.com.sigcar.dominio.Servico.java:141)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".hashCode()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method equals. */
  after (final br.com.sigcar.dominio.Servico object$rac, final java.lang.Object obj) throwing (Throwable rac$e) :
     (execution(boolean br.com.sigcar.dominio.Servico.equals(java.lang.Object))) && this(object$rac) && args(obj) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".equals(java.lang.Object)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.equals\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.dominio.Servico.equals regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\", line 179 (br.com.sigcar.dominio.Servico.java:179)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".equals(java.lang.Object)", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method setId. */
  before (final br.com.sigcar.dominio.Servico object$rac, final int id) :
     (execution(void br.com.sigcar.dominio.Servico.setId(int))) && 
     this(object$rac) && args(id) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Servico.setId regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", [spec-case]: line 52, character 26 (br.com.sigcar.dominio.Servico.java:52), and \nby method br.com.sigcar.dominio.Servico.setId regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'id\' is "+id;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setId regarding specifications at \n[spec-case]: line 52, character 26 (br.com.sigcar.dominio.Servico.java:52)"+", when \n"+"\t\'id\' is "+id+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (id > 0);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setId(int)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setStatus. */
  before (final br.com.sigcar.dominio.Servico object$rac, final boolean status) :
     (execution(void br.com.sigcar.dominio.Servico.setStatus(boolean))) && 
     this(object$rac) && args(status) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Servico.setStatus regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", [spec-case]: line 68, character 23 (br.com.sigcar.dominio.Servico.java:68), and \nby method br.com.sigcar.dominio.Servico.setStatus regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\"";
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setStatus regarding specifications at \n[spec-case]: line 68, character 23 (br.com.sigcar.dominio.Servico.java:68)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setStatus(boolean)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setDataSolicitacao. */
  before (final br.com.sigcar.dominio.Servico object$rac, final java.util.Date dataSolicitacao) :
     (execution(void br.com.sigcar.dominio.Servico.setDataSolicitacao(java.util.Date))) && 
     this(object$rac) && args(dataSolicitacao) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Servico.setDataSolicitacao regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", [spec-case]: line 77, character 40 (br.com.sigcar.dominio.Servico.java:77), and \nby method br.com.sigcar.dominio.Servico.setDataSolicitacao regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'dataSolicitacao\' is "+dataSolicitacao;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setDataSolicitacao regarding specifications at \n[spec-case]: line 77, character 40 (br.com.sigcar.dominio.Servico.java:77)"+", when \n"+"\t\'dataSolicitacao\' is "+dataSolicitacao+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (dataSolicitacao != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDataSolicitacao(java.util.Date)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setNomeEntidade. */
  before (final br.com.sigcar.dominio.Servico object$rac, final java.lang.String nomeEntidade) :
     (execution(void br.com.sigcar.dominio.Servico.setNomeEntidade(java.lang.String))) && 
     this(object$rac) && args(nomeEntidade) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Servico.setNomeEntidade regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", [spec-case]: line 89, character 37 (br.com.sigcar.dominio.Servico.java:89), and \nby method br.com.sigcar.dominio.Servico.setNomeEntidade regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'nomeEntidade\' is "+nomeEntidade;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setNomeEntidade regarding specifications at \n[spec-case]: line 89, character 37 (br.com.sigcar.dominio.Servico.java:89)"+", when \n"+"\t\'nomeEntidade\' is "+nomeEntidade+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (nomeEntidade != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setNomeEntidade(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setUsuario. */
  before (final br.com.sigcar.dominio.Servico object$rac, final br.com.sigcar.dominio.Usuario usuario) :
     (execution(void br.com.sigcar.dominio.Servico.setUsuario(br.com.sigcar.dominio.Usuario))) && 
     this(object$rac) && args(usuario) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Servico.setUsuario regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", [spec-case]: line 100, character 32 (br.com.sigcar.dominio.Servico.java:100), and \nby method br.com.sigcar.dominio.Servico.setUsuario regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'usuario\' is "+usuario;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setUsuario regarding specifications at \n[spec-case]: line 100, character 32 (br.com.sigcar.dominio.Servico.java:100)"+", when \n"+"\t\'usuario\' is "+usuario+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (usuario != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setUsuario(br.com.sigcar.dominio.Usuario)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setDocumentos. */
  before (final br.com.sigcar.dominio.Servico object$rac, final java.util.List documentos) :
     (execution(void br.com.sigcar.dominio.Servico.setDocumentos(java.util.List))) && 
     this(object$rac) && args(documentos) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Servico.setDocumentos regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", [spec-case]: line 111, character 35 (br.com.sigcar.dominio.Servico.java:111), and \nby method br.com.sigcar.dominio.Servico.setDocumentos regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'documentos\' is "+documentos;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setDocumentos regarding specifications at \n[spec-case]: line 111, character 35 (br.com.sigcar.dominio.Servico.java:111)"+", when \n"+"\t\'documentos\' is "+documentos+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (documentos != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setDocumentos(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setTipoServico. */
  before (final br.com.sigcar.dominio.Servico object$rac, final br.com.sigcar.enums.TipoServico tipoServico) :
     (execution(void br.com.sigcar.dominio.Servico.setTipoServico(br.com.sigcar.enums.TipoServico))) && 
     this(object$rac) && args(tipoServico) {
       String preErrorMsg = "by method br.com.sigcar.dominio.Servico.setTipoServico regarding specifications at \nFile \"br.com.sigcar.dominio.Servico.java\", [spec-case]: line 122, character 36 (br.com.sigcar.dominio.Servico.java:122), and \nby method br.com.sigcar.dominio.Servico.setTipoServico regarding code at \nFile \"br.com.sigcar.dominio.Servico.java\""+", when \n"+"\t\'tipoServico\' is "+tipoServico;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.dominio.Servico.java\" by method br.com.sigcar.dominio.Servico.setTipoServico regarding specifications at \n[spec-case]: line 122, character 36 (br.com.sigcar.dominio.Servico.java:122)"+", when \n"+"\t\'tipoServico\' is "+tipoServico+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (tipoServico != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTipoServico(br.com.sigcar.enums.TipoServico)");

     }


}

import br.com.sigcar.execucao.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import br.com.sigcar.dominio.Contestacao;
import br.com.sigcar.repositorios.ContestacaoRepositorio;
import br.com.sigcar.services.ZonaService;
import br.com.sigcar.util.HibernateUtil;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_execucao_MainFile$0152f17b_aeca_4a00_bb3b_3208f1677c8f {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;


  /** Generated by AspectJML to check the normal postcondition of
   * method MainFile. */
  after (final br.com.sigcar.execucao.MainFile object$rac, final int a, final int f) returning () :
     execution(br.com.sigcar.execucao.MainFile.new( int, int )) && this(object$rac) && args(a, f) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.execucao.MainFile.<init> regarding specifications at \nFile \"br.com.sigcar.execucao.MainFile.java\", line 17, character 27 (br.com.sigcar.execucao.MainFile.java:17), line 18, character 28 (br.com.sigcar.execucao.MainFile.java:18), and \nby method br.com.sigcar.execucao.MainFile.<init> regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+", when \n"+"\t\'this.age\' is "+object$rac.age+"\n\t\'this.fate\' is "+object$rac.fate+"\n\t\'a\' is "+a+"\n\t\'f\' is "+f;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.<init> regarding specifications at \nline 17, character 27 (br.com.sigcar.execucao.MainFile.java:17), line 18, character 28 (br.com.sigcar.execucao.MainFile.java:18)"+", when \n"+"\t\'this.age\' is "+object$rac.age+"\n\t\'this.fate\' is "+object$rac.fate+"\n\t\'a\' is "+a+"\n\t\'f\' is "+f+"\nCaused by: ";
       if (((0 <= a) && (a < f))){
         try {
           rac$b = ((object$rac.age == a) && (object$rac.fate == f));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "br.com.sigcar.execucao.MainFile.<init>(int, int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method MainFile. */
  after (final br.com.sigcar.execucao.MainFile object$rac, final int a, final int f) throwing (Throwable rac$e) :
     execution(br.com.sigcar.execucao.MainFile.new( int, int )) && this(object$rac) && args(a, f) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.execucao.MainFile.<init>(int, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((0 <= a) && (a < f))) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.execucao.MainFile.<init> regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.execucao.MainFile.<init>(int, int)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void br.com.sigcar.execucao.MainFile.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.execucao.MainFile.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.execucao.MainFile.main regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.execucao.MainFile.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class MainFile. */
  before (final br.com.sigcar.execucao.MainFile object$rac) :
     (execution(!static * br.com.sigcar.execucao.MainFile+.*(..))) && 
     !@annotation(Helper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"MainFile.java\"> regarding specifications at \nFile \"MainFile.java\", line 13, character 29 (MainFile.java:13), when \n\tnullable field 'this.age' is "+object$rac.age+"\n\tnullable field 'this.fate' is "+object$rac.fate;
         String evalErrorMsg = "Invalid expression in \"@pre <File \"MainFile.java\"> regarding specifications at \nFile \"MainFile.java\", line 13, character 29 (MainFile.java:13), when \n\tnullable field 'this.age' is "+object$rac.age+"\n\tnullable field 'this.fate' is "+object$rac.fate+"\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((0 <= object$rac.age) && (object$rac.age <= object$rac.fate));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method MainFile. */
  before (final br.com.sigcar.execucao.MainFile object$rac, final int a, final int f) :
     execution(br.com.sigcar.execucao.MainFile.new( int, int )) && 
     this(object$rac) && args(a, f) {
       String preErrorMsg = "by method br.com.sigcar.execucao.MainFile.<init> regarding specifications at \nFile \"br.com.sigcar.execucao.MainFile.java\", [spec-case]: line 15, character 29 (br.com.sigcar.execucao.MainFile.java:15), line 16, character 25 (br.com.sigcar.execucao.MainFile.java:16), and \nby method br.com.sigcar.execucao.MainFile.<init> regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+", when \n"+"\t\'a\' is "+a+"\n\t\'f\' is "+f;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.<init> regarding specifications at \n[spec-case]: line 15, character 29 (br.com.sigcar.execucao.MainFile.java:15), line 16, character 25 (br.com.sigcar.execucao.MainFile.java:16)"+", when \n"+"\t\'a\' is "+a+"\n\t\'f\' is "+f+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((0 <= a) && (a < f));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "br.com.sigcar.execucao.MainFile.<init>(int, int)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method older. */
  void around (final br.com.sigcar.execucao.MainFile object$rac) :
     (execution(void br.com.sigcar.execucao.MainFile.older()))
     && this(object$rac) {
      boolean rac$b = true;
      boolean rac$pre0;
      boolean rac$pre1;
      final int rac$old0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (object$rac.age < (object$rac.fate - 1));
  		rac$pre1 = (object$rac.age == (object$rac.fate - 1));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
       if (rac$pre0) {
         try {
         // saving old expressions and old vars related to each spec case
          rac$old0 = (object$rac.age + 1);
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
         }
       }
       else {
        rac$old0 = 0;
       }
      String preErrorMsg = "by method br.com.sigcar.execucao.MainFile.older regarding specifications at \nFile \"br.com.sigcar.execucao.MainFile.java\", [spec-case]: line 25, character 33 (br.com.sigcar.execucao.MainFile.java:25), and \n[spec-case]: line 30, character 34 (br.com.sigcar.execucao.MainFile.java:30), and \nby method br.com.sigcar.execucao.MainFile.older regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+", when \n"+"\t\'this.age\' is "+object$rac.age+"\n\t\'this.fate\' is "+object$rac.fate;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.older regarding specifications at \n[spec-case]: line 25, character 33 (br.com.sigcar.execucao.MainFile.java:25), and \n[spec-case]: line 30, character 34 (br.com.sigcar.execucao.MainFile.java:30)"+", when \n"+"\t\'this.age\' is "+object$rac.age+"\n\t\'this.fate\' is "+object$rac.fate+"\nCaused by: ";
      try {
        rac$b = ((object$rac.age < (object$rac.fate - 1)) || (object$rac.age == (object$rac.fate - 1)));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".older()");
      try {
        proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.execucao.MainFile.older regarding specifications at \nFile \"br.com.sigcar.execucao.MainFile.java\", line 27, character 33 (br.com.sigcar.execucao.MainFile.java:27), and \nby method br.com.sigcar.execucao.MainFile.older regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+", when \n"+"\t\'this.age\' is "+object$rac.age;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.older regarding specifications at \nline 27, character 33 (br.com.sigcar.execucao.MainFile.java:27)"+", when \n"+"\t\'this.age\' is "+object$rac.age+"\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (object$rac.age == rac$old0);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".older()");
       }
         nPostErrorMsg =  "by method br.com.sigcar.execucao.MainFile.older regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\"";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.execucao.MainFile.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".older()");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.older\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.execucao.MainFile.older regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".older()", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.execucao.DeathException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.older regarding specifications at \nline 32, character 31 (br.com.sigcar.execucao.MainFile.java:32)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.execucao.MainFile.older regarding specifications at \nline 32, character 31 (br.com.sigcar.execucao.MainFile.java:32)"+", and \n"+"by method br.com.sigcar.execucao.MainFile.older regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".older()", rac$e);
  		 }

  		     if (rac$e instanceof br.com.sigcar.execucao.DeathException) {
  			   br.com.sigcar.execucao.DeathException e = (br.com.sigcar.execucao.DeathException) rac$e;
  			   boolean rac$b2 = true;
  			   try{			     
  			     rac$b2 = (object$rac.age == object$rac.fate);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.execucao.MainFile.java\" by method br.com.sigcar.execucao.MainFile.older regarding specifications at \nline 34, character 49 (br.com.sigcar.execucao.MainFile.java:34)"+", when \n"+"\t\'this.age\' is "+object$rac.age+"\n\t\'this.fate\' is "+object$rac.fate+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b2) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b2;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.execucao.MainFile.older regarding specifications at \nline 34, character 49 (br.com.sigcar.execucao.MainFile.java:34)"+", and \n"+"by method br.com.sigcar.execucao.MainFile.older regarding code at \nFile \"br.com.sigcar.execucao.MainFile.java\""+", when \n"+"\t\'this.age\' is "+object$rac.age+"\n\t\'this.fate\' is "+object$rac.fate+ ", when \n"+"\t\'this.age\' is "+object$rac.age+"\n\t\'this.fate\' is "+object$rac.fate+"\n\t"+rac$ErrorMsg+rac$e, "e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".older()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".older()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.execucao.DeathException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.execucao.DeathException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
  	}

  /** Generated by AspectJML to check non-static invariants of 
   * class MainFile. */
  after (final br.com.sigcar.execucao.MainFile object$rac) :
     (execution(!static * br.com.sigcar.execucao.MainFile+.*(..)) || 
       execution(br.com.sigcar.execucao.MainFile+.new(..))) && 
     !execution(void br.com.sigcar.execucao.MainFile.finalize() throws Throwable) && 
     !@annotation(Helper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"MainFile.java\"> regarding specifications at \nFile \"MainFile.java\", line 13, character 29 (MainFile.java:13), when \n\tnullable field 'this.age' is "+object$rac.age+"\n\tnullable field 'this.fate' is "+object$rac.fate;
         String evalErrorMsg = "Invalid expression in \"@post <File \"MainFile.java\"> regarding specifications at \nFile \"MainFile.java\", line 13, character 29 (MainFile.java:13), when \n\tnullable field 'this.age' is "+object$rac.age+"\n\tnullable field 'this.fate' is "+object$rac.fate+"\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((0 <= object$rac.age) && (object$rac.age <= object$rac.fate));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }
}

import br.com.sigcar.repositorios.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.ArrayList;
import java.util.List;
import br.com.sigcar.dominio.Funcionario;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_repositorios_FuncionarioRepositorio$93c0a0de_2e4c_48a2_81b3_818bff0aa6aa {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;





  /** Generated by AspectJML to check the exceptional postcondition of
   * method FuncionarioRepositorio. */
  after (final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.repositorios.FuncionarioRepositorio.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.repositorios.FuncionarioRepositorio.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.repositorios.FuncionarioRepositorio.<init> regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.repositorios.FuncionarioRepositorio.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method contains. */
  after (final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac, final br.com.sigcar.dominio.Funcionario funcionario) throwing (Throwable rac$e) :
     (execution(boolean br.com.sigcar.repositorios.FuncionarioRepositorio.contains(br.com.sigcar.dominio.Funcionario))) && this(object$rac) && args(funcionario) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".contains(br.com.sigcar.dominio.Funcionario)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (funcionario != null)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.contains\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.repositorios.FuncionarioRepositorio.contains regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 27 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:27)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".contains(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getFuncionario. */
  after (final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac, final java.lang.String login) throwing (Throwable rac$e) :
     (execution(br.com.sigcar.dominio.Funcionario br.com.sigcar.repositorios.FuncionarioRepositorio.getFuncionario(java.lang.String))) && this(object$rac) && args(login) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFuncionario(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.getFuncionario\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.repositorios.FuncionarioRepositorio.getFuncionario regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 36 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:36)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFuncionario(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listarFuncionarios. */
  after (final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac) throwing (Throwable rac$e) :
     (execution(java.util.List br.com.sigcar.repositorios.FuncionarioRepositorio.listarFuncionarios())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listarFuncionarios()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.listarFuncionarios\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.repositorios.FuncionarioRepositorio.listarFuncionarios regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 55 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:55)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listarFuncionarios()", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method contains. */
  before (final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac, final br.com.sigcar.dominio.Funcionario funcionario) :
     (execution(boolean br.com.sigcar.repositorios.FuncionarioRepositorio.contains(br.com.sigcar.dominio.Funcionario))) && 
     this(object$rac) && args(funcionario) {
       String preErrorMsg = "by method br.com.sigcar.repositorios.FuncionarioRepositorio.contains regarding specifications at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", [spec-case]: line 17, character 35 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:17), and \nby method br.com.sigcar.repositorios.FuncionarioRepositorio.contains regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 27 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:27)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.contains regarding specifications at \n[spec-case]: line 17, character 35 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:17)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (funcionario != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".contains(br.com.sigcar.dominio.Funcionario)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method salvar. */
  boolean around (final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac, final br.com.sigcar.dominio.Funcionario entidade) :
     (execution(boolean br.com.sigcar.repositorios.FuncionarioRepositorio.salvar(br.com.sigcar.dominio.Funcionario)))
     && this(object$rac) && args(entidade) {
      boolean rac$b = true;
      boolean rac$result = false;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((entidade != null) && !(object$rac.contains(entidade)));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.repositorios.FuncionarioRepositorio.salvar regarding specifications at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", [spec-case]: line 39, character 33 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:39), and \nby method br.com.sigcar.repositorios.FuncionarioRepositorio.salvar regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 51 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:51)"+", when \n"+"\t\'entidade\' is "+entidade;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.salvar regarding specifications at \n[spec-case]: line 39, character 33 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:39)"+", when \n"+"\t\'entidade\' is "+entidade+"\nCaused by: ";
      try {
        rac$b = ((entidade != null) && !(object$rac.contains(entidade)));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvar(br.com.sigcar.dominio.Funcionario)");
      try {
        rac$result = proceed(object$rac, entidade);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.salvar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.repositorios.FuncionarioRepositorio.salvar regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 51 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:51)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvar(br.com.sigcar.dominio.Funcionario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method remover. */
  boolean around (final br.com.sigcar.repositorios.FuncionarioRepositorio object$rac, final br.com.sigcar.dominio.Funcionario entidade) :
     (execution(boolean br.com.sigcar.repositorios.FuncionarioRepositorio.remover(br.com.sigcar.dominio.Funcionario)))
     && this(object$rac) && args(entidade) {
      boolean rac$b = true;
      boolean rac$result = false;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((entidade != null) && object$rac.contains(entidade));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.repositorios.FuncionarioRepositorio.remover regarding specifications at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", [spec-case]: line 58, character 32 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:58), and \nby method br.com.sigcar.repositorios.FuncionarioRepositorio.remover regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 69 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:69)"+", when \n"+"\t\'entidade\' is "+entidade;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.remover regarding specifications at \n[spec-case]: line 58, character 32 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:58)"+", when \n"+"\t\'entidade\' is "+entidade+"\nCaused by: ";
      try {
        rac$b = ((entidade != null) && object$rac.contains(entidade));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)");
      try {
        rac$result = proceed(object$rac, entidade);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\" by method br.com.sigcar.repositorios.FuncionarioRepositorio.remover\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.repositorios.FuncionarioRepositorio.remover regarding code at \nFile \"br.com.sigcar.repositorios.FuncionarioRepositorio.java\", line 69 (br.com.sigcar.repositorios.FuncionarioRepositorio.java:69)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

}

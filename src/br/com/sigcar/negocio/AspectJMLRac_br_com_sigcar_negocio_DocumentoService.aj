import br.com.sigcar.negocio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.inject.Inject;
import br.com.sigcar.dominio.Documento;
import br.com.sigcar.exceptions.NegocioException;
import br.com.sigcar.repositorios.DocumentoRepositorio;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_negocio_DocumentoService$e7334d98_a76e_40ed_a6fe_7c3abbd08d53 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;


  /** Generated by AspectJML to check the exceptional postcondition of
   * method DocumentoService. */
  after (final br.com.sigcar.negocio.DocumentoService object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.DocumentoService.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.DocumentoService.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.DocumentoService.<init> regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.DocumentoService.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method DocumentoService. */
  after (final br.com.sigcar.negocio.DocumentoService object$rac, final br.com.sigcar.repositorios.DocumentoRepositorio documentoRepositorio2) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.DocumentoService.new( br.com.sigcar.repositorios.DocumentoRepositorio )) && this(object$rac) && args(documentoRepositorio2) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.DocumentoService.<init>(br.com.sigcar.repositorios.DocumentoRepositorio)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (documentoRepositorio2 != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.DocumentoService.<init> regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.DocumentoService.<init>(br.com.sigcar.repositorios.DocumentoRepositorio)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method buscar. */
  after (final br.com.sigcar.negocio.DocumentoService object$rac, final br.com.sigcar.dominio.Documento documento) throwing (Throwable rac$e) :
     (execution(br.com.sigcar.dominio.Documento br.com.sigcar.negocio.DocumentoService.buscar(br.com.sigcar.dominio.Documento))) && this(object$rac) && args(documento) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Documento)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (documento != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.buscar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.DocumentoService.buscar regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 52 (br.com.sigcar.negocio.DocumentoService.java:52)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Documento)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the precondition of
   * method DocumentoService. */
  before (final br.com.sigcar.negocio.DocumentoService object$rac, final br.com.sigcar.repositorios.DocumentoRepositorio documentoRepositorio2) :
     execution(br.com.sigcar.negocio.DocumentoService.new( br.com.sigcar.repositorios.DocumentoRepositorio )) && 
     this(object$rac) && args(documentoRepositorio2) {
       String preErrorMsg = "by method br.com.sigcar.negocio.DocumentoService.<init> regarding specifications at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", [spec-case]: line 23, character 46 (br.com.sigcar.negocio.DocumentoService.java:23), and \nby method br.com.sigcar.negocio.DocumentoService.<init> regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\""+", when \n"+"\t\'documentoRepositorio2\' is "+documentoRepositorio2;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.<init> regarding specifications at \n[spec-case]: line 23, character 46 (br.com.sigcar.negocio.DocumentoService.java:23)"+", when \n"+"\t\'documentoRepositorio2\' is "+documentoRepositorio2+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (documentoRepositorio2 != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "br.com.sigcar.negocio.DocumentoService.<init>(br.com.sigcar.repositorios.DocumentoRepositorio)");

     }

  /** Generated by AspectJML to check the precondition of
   * method buscar. */
  before (final br.com.sigcar.negocio.DocumentoService object$rac, final br.com.sigcar.dominio.Documento documento) :
     (execution(br.com.sigcar.dominio.Documento br.com.sigcar.negocio.DocumentoService.buscar(br.com.sigcar.dominio.Documento))) && 
     this(object$rac) && args(documento) {
       String preErrorMsg = "by method br.com.sigcar.negocio.DocumentoService.buscar regarding specifications at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", [spec-case]: line 47, character 34 (br.com.sigcar.negocio.DocumentoService.java:47), and \nby method br.com.sigcar.negocio.DocumentoService.buscar regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 52 (br.com.sigcar.negocio.DocumentoService.java:52)"+", when \n"+"\t\'documento\' is "+documento;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.buscar regarding specifications at \n[spec-case]: line 47, character 34 (br.com.sigcar.negocio.DocumentoService.java:47)"+", when \n"+"\t\'documento\' is "+documento+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (documento != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Documento)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method adicionar. */
  br.com.sigcar.dominio.Documento around (final br.com.sigcar.negocio.DocumentoService object$rac, final br.com.sigcar.dominio.Documento documento) :
     (execution(br.com.sigcar.dominio.Documento br.com.sigcar.negocio.DocumentoService.adicionar(br.com.sigcar.dominio.Documento)))
     && this(object$rac) && args(documento) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Documento rac$result = null;
      boolean rac$pre0;
      boolean rac$pre1;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((documento != null) && (object$rac.documentoRepositorio != null));
  		rac$pre1 = object$rac.documentoRepositorio.contains(documento);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.DocumentoService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", [spec-case]: line 30, character 36 (br.com.sigcar.negocio.DocumentoService.java:30), line 31, character 46 (br.com.sigcar.negocio.DocumentoService.java:31), and \n[spec-case]: line 35, character 65 (br.com.sigcar.negocio.DocumentoService.java:35), and \nby method br.com.sigcar.negocio.DocumentoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 44 (br.com.sigcar.negocio.DocumentoService.java:44)"+", when \n"+"\t\'this.documentoRepositorio\' is "+object$rac.documentoRepositorio+"\n\t\'documento\' is "+documento;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.adicionar regarding specifications at \n[spec-case]: line 30, character 36 (br.com.sigcar.negocio.DocumentoService.java:30), line 31, character 46 (br.com.sigcar.negocio.DocumentoService.java:31), and \n[spec-case]: line 35, character 65 (br.com.sigcar.negocio.DocumentoService.java:35)"+", when \n"+"\t\'this.documentoRepositorio\' is "+object$rac.documentoRepositorio+"\n\t\'documento\' is "+documento+"\nCaused by: ";
      try {
        rac$b = (((documento != null) && (object$rac.documentoRepositorio != null)) || object$rac.documentoRepositorio.contains(documento));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Documento)");
      try {
        rac$result = proceed(object$rac, documento);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.DocumentoService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 32, character 33 (br.com.sigcar.negocio.DocumentoService.java:32), and \nby method br.com.sigcar.negocio.DocumentoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 44 (br.com.sigcar.negocio.DocumentoService.java:44)"+", when \n"+"\t\'documento\' is "+documento;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.adicionar regarding specifications at \nline 32, character 33 (br.com.sigcar.negocio.DocumentoService.java:32)"+", when \n"+"\t\'documento\' is "+documento+"\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (rac$result == documento);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Documento)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.DocumentoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 44 (br.com.sigcar.negocio.DocumentoService.java:44)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.DocumentoService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Documento)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.adicionar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.DocumentoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 44 (br.com.sigcar.negocio.DocumentoService.java:44)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Documento)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.DocumentoService.java\" by method br.com.sigcar.negocio.DocumentoService.adicionar regarding specifications at \nline 36, character 27 (br.com.sigcar.negocio.DocumentoService.java:36)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.DocumentoService.adicionar regarding specifications at \nline 36, character 27 (br.com.sigcar.negocio.DocumentoService.java:36)"+", and \n"+"by method br.com.sigcar.negocio.DocumentoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.DocumentoService.java\", line 44 (br.com.sigcar.negocio.DocumentoService.java:44)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Documento)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Documento)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
      return rac$result;
  	}

}

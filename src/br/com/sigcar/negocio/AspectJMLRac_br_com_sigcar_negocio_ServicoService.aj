import br.com.sigcar.negocio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.List;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.inject.Inject;
import br.com.sigcar.dominio.Documento;
import br.com.sigcar.dominio.Servico;
import br.com.sigcar.exceptions.NegocioException;
import br.com.sigcar.repositorios.DocumentoRepositorio;
import br.com.sigcar.repositorios.ServicoRepositorio;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_negocio_ServicoService$33662ff6_fcf4_45fe_babf_390ceafb84fb {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;



  /** Generated by AspectJML to check the exceptional postcondition of
   * method ServicoService. */
  after (final br.com.sigcar.negocio.ServicoService object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.ServicoService.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.ServicoService.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.ServicoService.<init> regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.ServicoService.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method ServicoService. */
  after (final br.com.sigcar.negocio.ServicoService object$rac, final br.com.sigcar.repositorios.DocumentoRepositorio documentoRepositorio2, final br.com.sigcar.repositorios.ServicoRepositorio servicoRepositorio2) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.ServicoService.new( br.com.sigcar.repositorios.DocumentoRepositorio, br.com.sigcar.repositorios.ServicoRepositorio )) && this(object$rac) && args(documentoRepositorio2, servicoRepositorio2) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.ServicoService.<init>(br.com.sigcar.repositorios.DocumentoRepositorio, br.com.sigcar.repositorios.ServicoRepositorio)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((documentoRepositorio2 != null) && (servicoRepositorio2 != null))) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.ServicoService.<init> regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.ServicoService.<init>(br.com.sigcar.repositorios.DocumentoRepositorio, br.com.sigcar.repositorios.ServicoRepositorio)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the precondition of
   * method ServicoService. */
  before (final br.com.sigcar.negocio.ServicoService object$rac, final br.com.sigcar.repositorios.DocumentoRepositorio documentoRepositorio2, final br.com.sigcar.repositorios.ServicoRepositorio servicoRepositorio2) :
     execution(br.com.sigcar.negocio.ServicoService.new( br.com.sigcar.repositorios.DocumentoRepositorio, br.com.sigcar.repositorios.ServicoRepositorio )) && 
     this(object$rac) && args(documentoRepositorio2, servicoRepositorio2) {
       String preErrorMsg = "by method br.com.sigcar.negocio.ServicoService.<init> regarding specifications at \nFile \"br.com.sigcar.negocio.ServicoService.java\", [spec-case]: line 30, character 46 (br.com.sigcar.negocio.ServicoService.java:30), line 31, character 44 (br.com.sigcar.negocio.ServicoService.java:31), and \nby method br.com.sigcar.negocio.ServicoService.<init> regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\""+", when \n"+"\t\'documentoRepositorio2\' is "+documentoRepositorio2+"\n\t\'servicoRepositorio2\' is "+servicoRepositorio2;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.<init> regarding specifications at \n[spec-case]: line 30, character 46 (br.com.sigcar.negocio.ServicoService.java:30), line 31, character 44 (br.com.sigcar.negocio.ServicoService.java:31)"+", when \n"+"\t\'documentoRepositorio2\' is "+documentoRepositorio2+"\n\t\'servicoRepositorio2\' is "+servicoRepositorio2+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((documentoRepositorio2 != null) && (servicoRepositorio2 != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "br.com.sigcar.negocio.ServicoService.<init>(br.com.sigcar.repositorios.DocumentoRepositorio, br.com.sigcar.repositorios.ServicoRepositorio)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method adicionar. */
  br.com.sigcar.dominio.Servico around (final br.com.sigcar.negocio.ServicoService object$rac, final br.com.sigcar.dominio.Servico servico, final java.util.List documentos) :
     (execution(br.com.sigcar.dominio.Servico br.com.sigcar.negocio.ServicoService.adicionar(br.com.sigcar.dominio.Servico, java.util.List)))
     && this(object$rac) && args(servico, documentos) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Servico rac$result = null;
      boolean rac$pre0;
      boolean rac$pre1;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((((servico != null) && (object$rac.servicoRepositorio != null)) && (object$rac.documentoRepositorio != null)) && (documentos != null));
  		rac$pre1 = object$rac.servicoRepositorio.contains(servico);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.ServicoService.java\", [spec-case]: line 39, character 34 (br.com.sigcar.negocio.ServicoService.java:39), line 40, character 44 (br.com.sigcar.negocio.ServicoService.java:40), line 41, character 46 (br.com.sigcar.negocio.ServicoService.java:41), line 42, character 37 (br.com.sigcar.negocio.ServicoService.java:42), and \n[spec-case]: line 46, character 61 (br.com.sigcar.negocio.ServicoService.java:46), and \n[spec-case]: line 50, character 43 (br.com.sigcar.negocio.ServicoService.java:50), and \nby method br.com.sigcar.negocio.ServicoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 70 (br.com.sigcar.negocio.ServicoService.java:70)"+", when \n"+"\t\'this.servicoRepositorio\' is "+object$rac.servicoRepositorio+"\n\t\'this.documentoRepositorio\' is "+object$rac.documentoRepositorio+"\n\t\'servico\' is "+servico+"\n\t\'documentos\' is "+documentos;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \n[spec-case]: line 39, character 34 (br.com.sigcar.negocio.ServicoService.java:39), line 40, character 44 (br.com.sigcar.negocio.ServicoService.java:40), line 41, character 46 (br.com.sigcar.negocio.ServicoService.java:41), line 42, character 37 (br.com.sigcar.negocio.ServicoService.java:42), and \n[spec-case]: line 46, character 61 (br.com.sigcar.negocio.ServicoService.java:46), and \n[spec-case]: line 50, character 43 (br.com.sigcar.negocio.ServicoService.java:50)"+", when \n"+"\t\'this.servicoRepositorio\' is "+object$rac.servicoRepositorio+"\n\t\'this.documentoRepositorio\' is "+object$rac.documentoRepositorio+"\n\t\'servico\' is "+servico+"\n\t\'documentos\' is "+documentos+"\nCaused by: ";
      try {
        rac$b = ((((((servico != null) && (object$rac.servicoRepositorio != null)) && (object$rac.documentoRepositorio != null)) && (documentos != null)) || object$rac.servicoRepositorio.contains(servico)) || (documentos == null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)");
      try {
        rac$result = proceed(object$rac, servico, documentos);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 43, character 33 (br.com.sigcar.negocio.ServicoService.java:43), and \nby method br.com.sigcar.negocio.ServicoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 70 (br.com.sigcar.negocio.ServicoService.java:70)"+", when \n"+"\t\'servico\' is "+servico;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \nline 43, character 33 (br.com.sigcar.negocio.ServicoService.java:43)"+", when \n"+"\t\'servico\' is "+servico+"\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (rac$result == servico);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.ServicoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 70 (br.com.sigcar.negocio.ServicoService.java:70)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.ServicoService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.ServicoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 70 (br.com.sigcar.negocio.ServicoService.java:70)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.ServicoService.java\"\nCaused by: ";
       if ((documentos == null)){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.adicionar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.ServicoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 70 (br.com.sigcar.negocio.ServicoService.java:70)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \nline 47, character 27 (br.com.sigcar.negocio.ServicoService.java:47)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \nline 47, character 27 (br.com.sigcar.negocio.ServicoService.java:47)"+", and \n"+"by method br.com.sigcar.negocio.ServicoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 70 (br.com.sigcar.negocio.ServicoService.java:70)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)", rac$e);
  		 }
  		   }
  		   if (rac$b && (documentos == null)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b2 = true;
  			   try{			     
  			     rac$b2 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \nline 51, character 27 (br.com.sigcar.negocio.ServicoService.java:51)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b2) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b2;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.ServicoService.adicionar regarding specifications at \nline 51, character 27 (br.com.sigcar.negocio.ServicoService.java:51)"+", and \n"+"by method br.com.sigcar.negocio.ServicoService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 70 (br.com.sigcar.negocio.ServicoService.java:70)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Servico, java.util.List)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method buscar. */
  br.com.sigcar.dominio.Servico around (final br.com.sigcar.negocio.ServicoService object$rac, final br.com.sigcar.dominio.Servico servico) :
     (execution(br.com.sigcar.dominio.Servico br.com.sigcar.negocio.ServicoService.buscar(br.com.sigcar.dominio.Servico)))
     && this(object$rac) && args(servico) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Servico rac$result = null;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (object$rac.servicoRepositorio != null);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.ServicoService.buscar regarding specifications at \nFile \"br.com.sigcar.negocio.ServicoService.java\", [spec-case]: line 73, character 43 (br.com.sigcar.negocio.ServicoService.java:73), and \nby method br.com.sigcar.negocio.ServicoService.buscar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 78 (br.com.sigcar.negocio.ServicoService.java:78)"+", when \n"+"\t\'this.servicoRepositorio\' is "+object$rac.servicoRepositorio;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.buscar regarding specifications at \n[spec-case]: line 73, character 43 (br.com.sigcar.negocio.ServicoService.java:73)"+", when \n"+"\t\'this.servicoRepositorio\' is "+object$rac.servicoRepositorio+"\nCaused by: ";
      try {
        rac$b = (object$rac.servicoRepositorio != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Servico)");
      try {
        rac$result = proceed(object$rac, servico);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.buscar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.ServicoService.buscar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 78 (br.com.sigcar.negocio.ServicoService.java:78)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Servico)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Servico)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method listar. */
  java.util.List around (final br.com.sigcar.negocio.ServicoService object$rac) :
     (execution(java.util.List br.com.sigcar.negocio.ServicoService.listar()))
     && this(object$rac) {
      boolean rac$b = true;
      java.util.List rac$result = null;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (object$rac.servicoRepositorio != null);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.ServicoService.listar regarding specifications at \nFile \"br.com.sigcar.negocio.ServicoService.java\", [spec-case]: line 81, character 43 (br.com.sigcar.negocio.ServicoService.java:81), and \nby method br.com.sigcar.negocio.ServicoService.listar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 85 (br.com.sigcar.negocio.ServicoService.java:85)"+", when \n"+"\t\'this.servicoRepositorio\' is "+object$rac.servicoRepositorio;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.listar regarding specifications at \n[spec-case]: line 81, character 43 (br.com.sigcar.negocio.ServicoService.java:81)"+", when \n"+"\t\'this.servicoRepositorio\' is "+object$rac.servicoRepositorio+"\nCaused by: ";
      try {
        rac$b = (object$rac.servicoRepositorio != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()");
      try {
        rac$result = proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.ServicoService.java\" by method br.com.sigcar.negocio.ServicoService.listar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.ServicoService.listar regarding code at \nFile \"br.com.sigcar.negocio.ServicoService.java\", line 85 (br.com.sigcar.negocio.ServicoService.java:85)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

}

import br.com.sigcar.negocio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.List;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.inject.Inject;
import br.com.sigcar.dominio.Funcionario;
import br.com.sigcar.exceptions.NegocioException;
import br.com.sigcar.repositorios.FuncionarioRepositorio;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_negocio_FuncionarioService$fe6b04a5_7c27_4db3_9277_ddadac4bae4d {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;





  /** Generated by AspectJML to check the exceptional postcondition of
   * method FuncionarioService. */
  after (final br.com.sigcar.negocio.FuncionarioService object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.FuncionarioService.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.FuncionarioService.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.<init> regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.FuncionarioService.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method FuncionarioService. */
  after (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.repositorios.FuncionarioRepositorio funcionarioRepositorio2) returning () :
     execution(br.com.sigcar.negocio.FuncionarioService.new( br.com.sigcar.repositorios.FuncionarioRepositorio )) && this(object$rac) && args(funcionarioRepositorio2) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method br.com.sigcar.negocio.FuncionarioService.<init> regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 27, character 48 (br.com.sigcar.negocio.FuncionarioService.java:27), and \nby method br.com.sigcar.negocio.FuncionarioService.<init> regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\""+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionarioRepositorio2\' is "+funcionarioRepositorio2;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.<init> regarding specifications at \nline 27, character 48 (br.com.sigcar.negocio.FuncionarioService.java:27)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionarioRepositorio2\' is "+funcionarioRepositorio2+"\nCaused by: ";
       if ((funcionarioRepositorio2 != null)){
         try {
           rac$b = (object$rac.funcionarioRepositorio == funcionarioRepositorio2);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "br.com.sigcar.negocio.FuncionarioService.<init>(br.com.sigcar.repositorios.FuncionarioRepositorio)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method FuncionarioService. */
  after (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.repositorios.FuncionarioRepositorio funcionarioRepositorio2) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.FuncionarioService.new( br.com.sigcar.repositorios.FuncionarioRepositorio )) && this(object$rac) && args(funcionarioRepositorio2) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.FuncionarioService.<init>(br.com.sigcar.repositorios.FuncionarioRepositorio)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (funcionarioRepositorio2 != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.<init> regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.FuncionarioService.<init>(br.com.sigcar.repositorios.FuncionarioRepositorio)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method buscar. */
  after (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.dominio.Funcionario funcionario) throwing (Throwable rac$e) :
     (execution(br.com.sigcar.dominio.Funcionario br.com.sigcar.negocio.FuncionarioService.buscar(br.com.sigcar.dominio.Funcionario))) && this(object$rac) && args(funcionario) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Funcionario)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (funcionario != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.buscar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.buscar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 81 (br.com.sigcar.negocio.FuncionarioService.java:81)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the precondition of
   * method FuncionarioService. */
  before (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.repositorios.FuncionarioRepositorio funcionarioRepositorio2) :
     execution(br.com.sigcar.negocio.FuncionarioService.new( br.com.sigcar.repositorios.FuncionarioRepositorio )) && 
     this(object$rac) && args(funcionarioRepositorio2) {
       String preErrorMsg = "by method br.com.sigcar.negocio.FuncionarioService.<init> regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", [spec-case]: line 25, character 48 (br.com.sigcar.negocio.FuncionarioService.java:25), and \nby method br.com.sigcar.negocio.FuncionarioService.<init> regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\""+", when \n"+"\t\'funcionarioRepositorio2\' is "+funcionarioRepositorio2;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.<init> regarding specifications at \n[spec-case]: line 25, character 48 (br.com.sigcar.negocio.FuncionarioService.java:25)"+", when \n"+"\t\'funcionarioRepositorio2\' is "+funcionarioRepositorio2+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (funcionarioRepositorio2 != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "br.com.sigcar.negocio.FuncionarioService.<init>(br.com.sigcar.repositorios.FuncionarioRepositorio)");

     }

  /** Generated by AspectJML to check the precondition of
   * method buscar. */
  before (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.dominio.Funcionario funcionario) :
     (execution(br.com.sigcar.dominio.Funcionario br.com.sigcar.negocio.FuncionarioService.buscar(br.com.sigcar.dominio.Funcionario))) && 
     this(object$rac) && args(funcionario) {
       String preErrorMsg = "by method br.com.sigcar.negocio.FuncionarioService.buscar regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", [spec-case]: line 76, character 36 (br.com.sigcar.negocio.FuncionarioService.java:76), and \nby method br.com.sigcar.negocio.FuncionarioService.buscar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 81 (br.com.sigcar.negocio.FuncionarioService.java:81)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.buscar regarding specifications at \n[spec-case]: line 76, character 36 (br.com.sigcar.negocio.FuncionarioService.java:76)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (funcionario != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Funcionario)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method adicionar. */
  br.com.sigcar.dominio.Funcionario around (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.dominio.Funcionario funcionario) :
     (execution(br.com.sigcar.dominio.Funcionario br.com.sigcar.negocio.FuncionarioService.adicionar(br.com.sigcar.dominio.Funcionario)))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Funcionario rac$result = null;
      boolean rac$pre0;
      boolean rac$pre1;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((funcionario != null) && (object$rac.funcionarioRepositorio != null));
  		rac$pre1 = object$rac.funcionarioRepositorio.contains(funcionario);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", [spec-case]: line 34, character 38 (br.com.sigcar.negocio.FuncionarioService.java:34), line 35, character 48 (br.com.sigcar.negocio.FuncionarioService.java:35), and \n[spec-case]: line 39, character 69 (br.com.sigcar.negocio.FuncionarioService.java:39), and \nby method br.com.sigcar.negocio.FuncionarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 51 (br.com.sigcar.negocio.FuncionarioService.java:51)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding specifications at \n[spec-case]: line 34, character 38 (br.com.sigcar.negocio.FuncionarioService.java:34), line 35, character 48 (br.com.sigcar.negocio.FuncionarioService.java:35), and \n[spec-case]: line 39, character 69 (br.com.sigcar.negocio.FuncionarioService.java:39)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = (((funcionario != null) && (object$rac.funcionarioRepositorio != null)) || object$rac.funcionarioRepositorio.contains(funcionario));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Funcionario)");
      try {
        rac$result = proceed(object$rac, funcionario);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 36, character 33 (br.com.sigcar.negocio.FuncionarioService.java:36), and \nby method br.com.sigcar.negocio.FuncionarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 51 (br.com.sigcar.negocio.FuncionarioService.java:51)"+", when \n"+"\t\'funcionario\' is "+funcionario;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding specifications at \nline 36, character 33 (br.com.sigcar.negocio.FuncionarioService.java:36)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (rac$result == funcionario);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Funcionario)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 51 (br.com.sigcar.negocio.FuncionarioService.java:51)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Funcionario)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.adicionar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 51 (br.com.sigcar.negocio.FuncionarioService.java:51)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding specifications at \nline 40, character 27 (br.com.sigcar.negocio.FuncionarioService.java:40)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding specifications at \nline 40, character 27 (br.com.sigcar.negocio.FuncionarioService.java:40)"+", and \n"+"by method br.com.sigcar.negocio.FuncionarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 51 (br.com.sigcar.negocio.FuncionarioService.java:51)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Funcionario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method remover. */
  void around (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.dominio.Funcionario funcionario) :
     (execution(void br.com.sigcar.negocio.FuncionarioService.remover(br.com.sigcar.dominio.Funcionario)))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      boolean rac$pre1;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((funcionario != null) && (object$rac.funcionarioRepositorio != null));
  		rac$pre1 = !(object$rac.funcionarioRepositorio.contains(funcionario));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.FuncionarioService.remover regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", [spec-case]: line 54, character 38 (br.com.sigcar.negocio.FuncionarioService.java:54), line 55, character 48 (br.com.sigcar.negocio.FuncionarioService.java:55), and \n[spec-case]: line 58, character 70 (br.com.sigcar.negocio.FuncionarioService.java:58), and \nby method br.com.sigcar.negocio.FuncionarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\""+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.remover regarding specifications at \n[spec-case]: line 54, character 38 (br.com.sigcar.negocio.FuncionarioService.java:54), line 55, character 48 (br.com.sigcar.negocio.FuncionarioService.java:55), and \n[spec-case]: line 58, character 70 (br.com.sigcar.negocio.FuncionarioService.java:58)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = (((funcionario != null) && (object$rac.funcionarioRepositorio != null)) || !(object$rac.funcionarioRepositorio.contains(funcionario)));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.FuncionarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\"";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.remover\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.remover regarding specifications at \nline 59, character 27 (br.com.sigcar.negocio.FuncionarioService.java:59)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.remover regarding specifications at \nline 59, character 27 (br.com.sigcar.negocio.FuncionarioService.java:59)"+", and \n"+"by method br.com.sigcar.negocio.FuncionarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Funcionario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method listar. */
  java.util.List around (final br.com.sigcar.negocio.FuncionarioService object$rac) :
     (execution(java.util.List br.com.sigcar.negocio.FuncionarioService.listar()))
     && this(object$rac) {
      boolean rac$b = true;
      java.util.List rac$result = null;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (object$rac.funcionarioRepositorio != null);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.FuncionarioService.listar regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", [spec-case]: line 69, character 47 (br.com.sigcar.negocio.FuncionarioService.java:69), and \nby method br.com.sigcar.negocio.FuncionarioService.listar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 73 (br.com.sigcar.negocio.FuncionarioService.java:73)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.listar regarding specifications at \n[spec-case]: line 69, character 47 (br.com.sigcar.negocio.FuncionarioService.java:69)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\nCaused by: ";
      try {
        rac$b = (object$rac.funcionarioRepositorio != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()");
      try {
        rac$result = proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.listar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.listar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 73 (br.com.sigcar.negocio.FuncionarioService.java:73)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method logar. */
  br.com.sigcar.dominio.Funcionario around (final br.com.sigcar.negocio.FuncionarioService object$rac, final br.com.sigcar.dominio.Funcionario funcionario) :
     (execution(br.com.sigcar.dominio.Funcionario br.com.sigcar.negocio.FuncionarioService.logar(br.com.sigcar.dominio.Funcionario)))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Funcionario rac$result = null;
      boolean rac$pre0;
      boolean rac$pre1;
      boolean rac$pre2;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (((funcionario != null) && (object$rac.funcionarioRepositorio != null)) && object$rac.funcionarioRepositorio.getFuncionario(funcionario.getLogin()).getSenha().equals(((java.lang.Object) (funcionario.getSenha()))));
  		rac$pre1 = (((funcionario != null) && (object$rac.funcionarioRepositorio != null)) && !(object$rac.funcionarioRepositorio.getFuncionario(funcionario.getLogin()).getSenha().equals(((java.lang.Object) (funcionario.getSenha())))));
  		rac$pre2 = (((funcionario != null) && (object$rac.funcionarioRepositorio != null)) && (object$rac.funcionarioRepositorio.getFuncionario(funcionario.getLogin()) == null));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", [spec-case]: line 84, character 38 (br.com.sigcar.negocio.FuncionarioService.java:84), line 85, character 48 (br.com.sigcar.negocio.FuncionarioService.java:85), line 86, character 134 (br.com.sigcar.negocio.FuncionarioService.java:86), and \n[spec-case]: line 90, character 38 (br.com.sigcar.negocio.FuncionarioService.java:90), line 91, character 48 (br.com.sigcar.negocio.FuncionarioService.java:91), line 92, character 128 (br.com.sigcar.negocio.FuncionarioService.java:92), and \n[spec-case]: line 98, character 38 (br.com.sigcar.negocio.FuncionarioService.java:98), line 99, character 48 (br.com.sigcar.negocio.FuncionarioService.java:99), line 100, character 85 (br.com.sigcar.negocio.FuncionarioService.java:100), and \nby method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \n[spec-case]: line 84, character 38 (br.com.sigcar.negocio.FuncionarioService.java:84), line 85, character 48 (br.com.sigcar.negocio.FuncionarioService.java:85), line 86, character 134 (br.com.sigcar.negocio.FuncionarioService.java:86), and \n[spec-case]: line 90, character 38 (br.com.sigcar.negocio.FuncionarioService.java:90), line 91, character 48 (br.com.sigcar.negocio.FuncionarioService.java:91), line 92, character 128 (br.com.sigcar.negocio.FuncionarioService.java:92), and \n[spec-case]: line 98, character 38 (br.com.sigcar.negocio.FuncionarioService.java:98), line 99, character 48 (br.com.sigcar.negocio.FuncionarioService.java:99), line 100, character 85 (br.com.sigcar.negocio.FuncionarioService.java:100)"+", when \n"+"\t\'this.funcionarioRepositorio\' is "+object$rac.funcionarioRepositorio+"\n\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = (((((funcionario != null) && (object$rac.funcionarioRepositorio != null)) && object$rac.funcionarioRepositorio.getFuncionario(funcionario.getLogin()).getSenha().equals(((java.lang.Object) (funcionario.getSenha())))) || (((funcionario != null) && (object$rac.funcionarioRepositorio != null)) && !(object$rac.funcionarioRepositorio.getFuncionario(funcionario.getLogin()).getSenha().equals(((java.lang.Object) (funcionario.getSenha())))))) || (((funcionario != null) && (object$rac.funcionarioRepositorio != null)) && (object$rac.funcionarioRepositorio.getFuncionario(funcionario.getLogin()) == null)));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)");
      try {
        rac$result = proceed(object$rac, funcionario);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 87, character 33 (br.com.sigcar.negocio.FuncionarioService.java:87), and \nby method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)"+", when \n"+"\t\'funcionario\' is "+funcionario;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 87, character 33 (br.com.sigcar.negocio.FuncionarioService.java:87)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (rac$result == funcionario);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.FuncionarioService.java\"\nCaused by: ";
       if (rac$pre2){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.logar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 93, character 27 (br.com.sigcar.negocio.FuncionarioService.java:93)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 93, character 27 (br.com.sigcar.negocio.FuncionarioService.java:93)"+", and \n"+"by method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }

  		     if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   br.com.sigcar.exceptions.NegocioException e = (br.com.sigcar.exceptions.NegocioException) rac$e;
  			   boolean rac$b2 = true;
  			   try{			     
  			     rac$b2 = e.getMessage().equals(((java.lang.Object) ("Senha incorreta")));
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 95, character 67 (br.com.sigcar.negocio.FuncionarioService.java:95)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b2) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b2;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 95, character 67 (br.com.sigcar.negocio.FuncionarioService.java:95)"+", and \n"+"by method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)"+"\n\t"+rac$ErrorMsg+rac$e, "e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre2) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b3 = true;
  			   try{			     
  			     rac$b3 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 101, character 27 (br.com.sigcar.negocio.FuncionarioService.java:101)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b3) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b3;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 101, character 27 (br.com.sigcar.negocio.FuncionarioService.java:101)"+", and \n"+"by method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }

  		     if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   br.com.sigcar.exceptions.NegocioException e = (br.com.sigcar.exceptions.NegocioException) rac$e;
  			   boolean rac$b4 = true;
  			   try{			     
  			     rac$b4 = e.getMessage().equals(((java.lang.Object) ("Funcionario nao encontrado")));
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.FuncionarioService.java\" by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 103, character 78 (br.com.sigcar.negocio.FuncionarioService.java:103)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b4) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b4;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.FuncionarioService.logar regarding specifications at \nline 103, character 78 (br.com.sigcar.negocio.FuncionarioService.java:103)"+", and \n"+"by method br.com.sigcar.negocio.FuncionarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.FuncionarioService.java\", line 116 (br.com.sigcar.negocio.FuncionarioService.java:116)"+"\n\t"+rac$ErrorMsg+rac$e, "e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Funcionario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
      return rac$result;
  	}

}

import br.com.sigcar.negocio.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.util.List;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.inject.Inject;
import br.com.sigcar.dominio.Usuario;
import br.com.sigcar.exceptions.NegocioException;
import br.com.sigcar.repositorios.UsuarioRepositorio;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_negocio_UsuarioService$846b78c7_13fa_4910_9ddb_87973cc73f4d {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;






  /** Generated by AspectJML to check the exceptional postcondition of
   * method UsuarioService. */
  after (final br.com.sigcar.negocio.UsuarioService object$rac) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.UsuarioService.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.UsuarioService.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.<init> regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.UsuarioService.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method UsuarioService. */
  after (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.repositorios.UsuarioRepositorio usuarioRepositorio2) throwing (Throwable rac$e) :
     execution(br.com.sigcar.negocio.UsuarioService.new( br.com.sigcar.repositorios.UsuarioRepositorio )) && this(object$rac) && args(usuarioRepositorio2) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.negocio.UsuarioService.<init>(br.com.sigcar.repositorios.UsuarioRepositorio)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (usuarioRepositorio2 != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.<init> regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.negocio.UsuarioService.<init>(br.com.sigcar.repositorios.UsuarioRepositorio)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method atualizar. */
  after (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.dominio.Usuario usuario) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.negocio.UsuarioService.atualizar(br.com.sigcar.dominio.Usuario))) && this(object$rac) && args(usuario) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".atualizar(br.com.sigcar.dominio.Usuario)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (usuario != null)) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.atualizar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.atualizar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".atualizar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the precondition of
   * method UsuarioService. */
  before (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.repositorios.UsuarioRepositorio usuarioRepositorio2) :
     execution(br.com.sigcar.negocio.UsuarioService.new( br.com.sigcar.repositorios.UsuarioRepositorio )) && 
     this(object$rac) && args(usuarioRepositorio2) {
       String preErrorMsg = "by method br.com.sigcar.negocio.UsuarioService.<init> regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", [spec-case]: line 24, character 44 (br.com.sigcar.negocio.UsuarioService.java:24), and \nby method br.com.sigcar.negocio.UsuarioService.<init> regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+", when \n"+"\t\'usuarioRepositorio2\' is "+usuarioRepositorio2;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.<init> regarding specifications at \n[spec-case]: line 24, character 44 (br.com.sigcar.negocio.UsuarioService.java:24)"+", when \n"+"\t\'usuarioRepositorio2\' is "+usuarioRepositorio2+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (usuarioRepositorio2 != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "br.com.sigcar.negocio.UsuarioService.<init>(br.com.sigcar.repositorios.UsuarioRepositorio)");

     }

  /** Generated by AspectJML to check the precondition of
   * method atualizar. */
  before (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.dominio.Usuario usuario) :
     (execution(void br.com.sigcar.negocio.UsuarioService.atualizar(br.com.sigcar.dominio.Usuario))) && 
     this(object$rac) && args(usuario) {
       String preErrorMsg = "by method br.com.sigcar.negocio.UsuarioService.atualizar regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", [spec-case]: line 73, character 32 (br.com.sigcar.negocio.UsuarioService.java:73), and \nby method br.com.sigcar.negocio.UsuarioService.atualizar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+", when \n"+"\t\'usuario\' is "+usuario;
       String evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.atualizar regarding specifications at \n[spec-case]: line 73, character 32 (br.com.sigcar.negocio.UsuarioService.java:73)"+", when \n"+"\t\'usuario\' is "+usuario+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (usuario != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".atualizar(br.com.sigcar.dominio.Usuario)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method adicionar. */
  br.com.sigcar.dominio.Usuario around (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.dominio.Usuario usuario) :
     (execution(br.com.sigcar.dominio.Usuario br.com.sigcar.negocio.UsuarioService.adicionar(br.com.sigcar.dominio.Usuario)))
     && this(object$rac) && args(usuario) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Usuario rac$result = null;
      boolean rac$pre0;
      boolean rac$pre1;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((usuario != null) && (object$rac.usuarioRepositorio != null));
  		rac$pre1 = object$rac.usuarioRepositorio.contains(usuario);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.UsuarioService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", [spec-case]: line 31, character 34 (br.com.sigcar.negocio.UsuarioService.java:31), line 32, character 44 (br.com.sigcar.negocio.UsuarioService.java:32), and \n[spec-case]: line 36, character 61 (br.com.sigcar.negocio.UsuarioService.java:36), and \nby method br.com.sigcar.negocio.UsuarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 48 (br.com.sigcar.negocio.UsuarioService.java:48)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.adicionar regarding specifications at \n[spec-case]: line 31, character 34 (br.com.sigcar.negocio.UsuarioService.java:31), line 32, character 44 (br.com.sigcar.negocio.UsuarioService.java:32), and \n[spec-case]: line 36, character 61 (br.com.sigcar.negocio.UsuarioService.java:36)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario+"\nCaused by: ";
      try {
        rac$b = (((usuario != null) && (object$rac.usuarioRepositorio != null)) || object$rac.usuarioRepositorio.contains(usuario));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Usuario)");
      try {
        rac$result = proceed(object$rac, usuario);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.UsuarioService.adicionar regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 33, character 33 (br.com.sigcar.negocio.UsuarioService.java:33), and \nby method br.com.sigcar.negocio.UsuarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 48 (br.com.sigcar.negocio.UsuarioService.java:48)"+", when \n"+"\t\'usuario\' is "+usuario;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.adicionar regarding specifications at \nline 33, character 33 (br.com.sigcar.negocio.UsuarioService.java:33)"+", when \n"+"\t\'usuario\' is "+usuario+"\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (rac$result == usuario);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Usuario)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.UsuarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 48 (br.com.sigcar.negocio.UsuarioService.java:48)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Usuario)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.adicionar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 48 (br.com.sigcar.negocio.UsuarioService.java:48)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.adicionar regarding specifications at \nline 37, character 27 (br.com.sigcar.negocio.UsuarioService.java:37)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.adicionar regarding specifications at \nline 37, character 27 (br.com.sigcar.negocio.UsuarioService.java:37)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.adicionar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 48 (br.com.sigcar.negocio.UsuarioService.java:48)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".adicionar(br.com.sigcar.dominio.Usuario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method remover. */
  void around (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.dominio.Usuario usuario) :
     (execution(void br.com.sigcar.negocio.UsuarioService.remover(br.com.sigcar.dominio.Usuario)))
     && this(object$rac) && args(usuario) {
      boolean rac$b = true;
      boolean rac$pre0;
      boolean rac$pre1;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((usuario != null) && (object$rac.usuarioRepositorio != null));
  		rac$pre1 = !(object$rac.usuarioRepositorio.contains(usuario));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.UsuarioService.remover regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", [spec-case]: line 51, character 34 (br.com.sigcar.negocio.UsuarioService.java:51), line 52, character 44 (br.com.sigcar.negocio.UsuarioService.java:52), and \n[spec-case]: line 55, character 62 (br.com.sigcar.negocio.UsuarioService.java:55), and \nby method br.com.sigcar.negocio.UsuarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.remover regarding specifications at \n[spec-case]: line 51, character 34 (br.com.sigcar.negocio.UsuarioService.java:51), line 52, character 44 (br.com.sigcar.negocio.UsuarioService.java:52), and \n[spec-case]: line 55, character 62 (br.com.sigcar.negocio.UsuarioService.java:55)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario+"\nCaused by: ";
      try {
        rac$b = (((usuario != null) && (object$rac.usuarioRepositorio != null)) || !(object$rac.usuarioRepositorio.contains(usuario)));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Usuario)");
      try {
        proceed(object$rac, usuario);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.UsuarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\"";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Usuario)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.remover\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.remover regarding specifications at \nline 56, character 27 (br.com.sigcar.negocio.UsuarioService.java:56)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.remover regarding specifications at \nline 56, character 27 (br.com.sigcar.negocio.UsuarioService.java:56)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.remover regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".remover(br.com.sigcar.dominio.Usuario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method listar. */
  java.util.List around (final br.com.sigcar.negocio.UsuarioService object$rac) :
     (execution(java.util.List br.com.sigcar.negocio.UsuarioService.listar()))
     && this(object$rac) {
      boolean rac$b = true;
      java.util.List rac$result = null;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (object$rac.usuarioRepositorio != null);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.UsuarioService.listar regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", [spec-case]: line 66, character 43 (br.com.sigcar.negocio.UsuarioService.java:66), and \nby method br.com.sigcar.negocio.UsuarioService.listar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 70 (br.com.sigcar.negocio.UsuarioService.java:70)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.listar regarding specifications at \n[spec-case]: line 66, character 43 (br.com.sigcar.negocio.UsuarioService.java:66)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\nCaused by: ";
      try {
        rac$b = (object$rac.usuarioRepositorio != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()");
      try {
        rac$result = proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.listar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.listar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 70 (br.com.sigcar.negocio.UsuarioService.java:70)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listar()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method buscar. */
  br.com.sigcar.dominio.Usuario around (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.dominio.Usuario usuario) :
     (execution(br.com.sigcar.dominio.Usuario br.com.sigcar.negocio.UsuarioService.buscar(br.com.sigcar.dominio.Usuario)))
     && this(object$rac) && args(usuario) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Usuario rac$result = null;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((usuario != null) && (object$rac.usuarioRepositorio != null));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.UsuarioService.buscar regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", [spec-case]: line 81, character 32 (br.com.sigcar.negocio.UsuarioService.java:81), line 82, character 43 (br.com.sigcar.negocio.UsuarioService.java:82), and \nby method br.com.sigcar.negocio.UsuarioService.buscar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 87 (br.com.sigcar.negocio.UsuarioService.java:87)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.buscar regarding specifications at \n[spec-case]: line 81, character 32 (br.com.sigcar.negocio.UsuarioService.java:81), line 82, character 43 (br.com.sigcar.negocio.UsuarioService.java:82)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario+"\nCaused by: ";
      try {
        rac$b = ((usuario != null) && (object$rac.usuarioRepositorio != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Usuario)");
      try {
        rac$result = proceed(object$rac, usuario);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.buscar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.buscar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 87 (br.com.sigcar.negocio.UsuarioService.java:87)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".buscar(br.com.sigcar.dominio.Usuario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method logar. */
  br.com.sigcar.dominio.Usuario around (final br.com.sigcar.negocio.UsuarioService object$rac, final br.com.sigcar.dominio.Usuario usuario) :
     (execution(br.com.sigcar.dominio.Usuario br.com.sigcar.negocio.UsuarioService.logar(br.com.sigcar.dominio.Usuario)))
     && this(object$rac) && args(usuario) {
      boolean rac$b = true;
      br.com.sigcar.dominio.Usuario rac$result = null;
      boolean rac$pre0;
      boolean rac$pre1;
      boolean rac$pre2;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (((usuario != null) && (object$rac.usuarioRepositorio != null)) && object$rac.usuarioRepositorio.getUsuario(usuario.getLogin()).getSenha().equals(((java.lang.Object) (usuario.getSenha()))));
  		rac$pre1 = (((usuario != null) && (object$rac.usuarioRepositorio != null)) && !(object$rac.usuarioRepositorio.getUsuario(usuario.getLogin()).getSenha().equals(((java.lang.Object) (usuario.getSenha())))));
  		rac$pre2 = (((usuario != null) && (object$rac.usuarioRepositorio != null)) && (object$rac.usuarioRepositorio.getUsuario(usuario.getLogin()) == null));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", [spec-case]: line 90, character 34 (br.com.sigcar.negocio.UsuarioService.java:90), line 91, character 44 (br.com.sigcar.negocio.UsuarioService.java:91), line 92, character 118 (br.com.sigcar.negocio.UsuarioService.java:92), and \n[spec-case]: line 96, character 34 (br.com.sigcar.negocio.UsuarioService.java:96), line 97, character 44 (br.com.sigcar.negocio.UsuarioService.java:97), line 98, character 112 (br.com.sigcar.negocio.UsuarioService.java:98), and \n[spec-case]: line 104, character 34 (br.com.sigcar.negocio.UsuarioService.java:104), line 105, character 44 (br.com.sigcar.negocio.UsuarioService.java:105), line 106, character 73 (br.com.sigcar.negocio.UsuarioService.java:106), and \n[spec-case]: line 112, character 34 (br.com.sigcar.negocio.UsuarioService.java:112), and \nby method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario;
      String evalPreErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \n[spec-case]: line 90, character 34 (br.com.sigcar.negocio.UsuarioService.java:90), line 91, character 44 (br.com.sigcar.negocio.UsuarioService.java:91), line 92, character 118 (br.com.sigcar.negocio.UsuarioService.java:92), and \n[spec-case]: line 96, character 34 (br.com.sigcar.negocio.UsuarioService.java:96), line 97, character 44 (br.com.sigcar.negocio.UsuarioService.java:97), line 98, character 112 (br.com.sigcar.negocio.UsuarioService.java:98), and \n[spec-case]: line 104, character 34 (br.com.sigcar.negocio.UsuarioService.java:104), line 105, character 44 (br.com.sigcar.negocio.UsuarioService.java:105), line 106, character 73 (br.com.sigcar.negocio.UsuarioService.java:106), and \n[spec-case]: line 112, character 34 (br.com.sigcar.negocio.UsuarioService.java:112)"+", when \n"+"\t\'this.usuarioRepositorio\' is "+object$rac.usuarioRepositorio+"\n\t\'usuario\' is "+usuario+"\nCaused by: ";
      try {
        rac$b = ((((((usuario != null) && (object$rac.usuarioRepositorio != null)) && object$rac.usuarioRepositorio.getUsuario(usuario.getLogin()).getSenha().equals(((java.lang.Object) (usuario.getSenha())))) || (((usuario != null) && (object$rac.usuarioRepositorio != null)) && !(object$rac.usuarioRepositorio.getUsuario(usuario.getLogin()).getSenha().equals(((java.lang.Object) (usuario.getSenha())))))) || (((usuario != null) && (object$rac.usuarioRepositorio != null)) && (object$rac.usuarioRepositorio.getUsuario(usuario.getLogin()) == null))) || (usuario == null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)");
      try {
        rac$result = proceed(object$rac, usuario);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 93, character 33 (br.com.sigcar.negocio.UsuarioService.java:93), and \nby method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+", when \n"+"\t\'usuario\' is "+usuario;
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 93, character 33 (br.com.sigcar.negocio.UsuarioService.java:93)"+", when \n"+"\t\'usuario\' is "+usuario+"\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (rac$result == usuario);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\"\nCaused by: ";
       if (rac$pre1){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\"\nCaused by: ";
       if (rac$pre2){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)");
       }
         nPostErrorMsg =  "by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)";
         evalErrorMsg = "Invalid expression in \"br.com.sigcar.negocio.UsuarioService.java\"\nCaused by: ";
       if ((usuario == null)){
         try {
           rac$b = false;
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 99, character 27 (br.com.sigcar.negocio.UsuarioService.java:99)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 99, character 27 (br.com.sigcar.negocio.UsuarioService.java:99)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }

  		     if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   br.com.sigcar.exceptions.NegocioException e = (br.com.sigcar.exceptions.NegocioException) rac$e;
  			   boolean rac$b2 = true;
  			   try{			     
  			     rac$b2 = e.getMessage().equals(((java.lang.Object) ("Senha incorreta")));
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 101, character 67 (br.com.sigcar.negocio.UsuarioService.java:101)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b2) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b2;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 101, character 67 (br.com.sigcar.negocio.UsuarioService.java:101)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+"\n\t"+rac$ErrorMsg+rac$e, "e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre2) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b3 = true;
  			   try{			     
  			     rac$b3 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 107, character 27 (br.com.sigcar.negocio.UsuarioService.java:107)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b3) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b3;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 107, character 27 (br.com.sigcar.negocio.UsuarioService.java:107)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }

  		     if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   br.com.sigcar.exceptions.NegocioException e = (br.com.sigcar.exceptions.NegocioException) rac$e;
  			   boolean rac$b4 = true;
  			   try{			     
  			     rac$b4 = e.getMessage().equals(((java.lang.Object) ("Usuario nao encontrado")));
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 109, character 74 (br.com.sigcar.negocio.UsuarioService.java:109)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b4) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b4;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 109, character 74 (br.com.sigcar.negocio.UsuarioService.java:109)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+"\n\t"+rac$ErrorMsg+rac$e, "e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
  		   if (rac$b && (usuario == null)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b5 = true;
  			   try{			     
  			     rac$b5 = jml$e instanceof br.com.sigcar.exceptions.NegocioException;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 113, character 27 (br.com.sigcar.negocio.UsuarioService.java:113)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b5) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b5;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 113, character 27 (br.com.sigcar.negocio.UsuarioService.java:113)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }

  		     if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   br.com.sigcar.exceptions.NegocioException e = (br.com.sigcar.exceptions.NegocioException) rac$e;
  			   boolean rac$b6 = true;
  			   try{			     
  			     rac$b6 = e.getMessage().equals(((java.lang.Object) ("Usuario nao encontrado")));
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.negocio.UsuarioService.java\" by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 115, character 75 (br.com.sigcar.negocio.UsuarioService.java:115)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b6) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "e";
  			     }
  			     else {
  			       rac$ErrorMsg += " and e";
  			     }
  			   }
  			   rac$b = rac$b && rac$b6;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.negocio.UsuarioService.logar regarding specifications at \nline 115, character 75 (br.com.sigcar.negocio.UsuarioService.java:115)"+", and \n"+"by method br.com.sigcar.negocio.UsuarioService.logar regarding code at \nFile \"br.com.sigcar.negocio.UsuarioService.java\", line 131 (br.com.sigcar.negocio.UsuarioService.java:131)"+"\n\t"+rac$ErrorMsg+rac$e, "e", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".logar(br.com.sigcar.dominio.Usuario)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof br.com.sigcar.exceptions.NegocioException) {
  			   throw new JMLInternalRuntimeException((br.com.sigcar.exceptions.NegocioException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
      return rac$result;
  	}

}

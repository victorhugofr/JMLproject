import br.com.sigcar.filtros.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import br.com.sigcar.dominio.Usuario;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_filtros_SegurancaFilter$c197070e_bb54_4ab3_a90d_b88fd2e55158 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;


  /** Generated by AspectJML to check the exceptional postcondition of
   * method doFilter. */
  after (final br.com.sigcar.filtros.SegurancaFilter object$rac, final javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.filtros.SegurancaFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain))) && this(object$rac) && args(request, response, chain) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = ((jml$ex instanceof java.io.IOException || jml$ex instanceof javax.servlet.ServletException) || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.filtros.SegurancaFilter.java\" by method br.com.sigcar.filtros.SegurancaFilter.doFilter regarding specifications at \nline 19, character 15 (br.com.sigcar.filtros.SegurancaFilter.java:19)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.filtros.SegurancaFilter.doFilter regarding specifications at \nline 19, character 15 (br.com.sigcar.filtros.SegurancaFilter.java:19)"+", and \n"+"by method br.com.sigcar.filtros.SegurancaFilter.doFilter regarding code at \nFile \"br.com.sigcar.filtros.SegurancaFilter.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method init. */
  after (final br.com.sigcar.filtros.SegurancaFilter object$rac, final javax.servlet.FilterConfig filterconfig) throwing (Throwable rac$e) :
     (execution(void br.com.sigcar.filtros.SegurancaFilter.init(javax.servlet.FilterConfig))) && this(object$rac) && args(filterconfig) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".init(javax.servlet.FilterConfig)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof javax.servlet.ServletException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.filtros.SegurancaFilter.java\" by method br.com.sigcar.filtros.SegurancaFilter.init regarding specifications at \nline 31, character 15 (br.com.sigcar.filtros.SegurancaFilter.java:31)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.filtros.SegurancaFilter.init regarding specifications at \nline 31, character 15 (br.com.sigcar.filtros.SegurancaFilter.java:31)"+", and \n"+"by method br.com.sigcar.filtros.SegurancaFilter.init regarding code at \nFile \"br.com.sigcar.filtros.SegurancaFilter.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".init(javax.servlet.FilterConfig)", rac$e);
  		 }
  		   }
  	 }




}

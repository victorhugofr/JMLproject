import br.com.sigcar.util.*;
import org.aspectjml.ajmlrac.runtime.*;
import org.aspectjml.lang.annotation.*;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.Map;
import java.util.Map.Entry;


privileged aspect AspectJMLRac_br_com_sigcar_util_HibernateUtil$66491db0_4027_41f4_8252_4810e83a77f6 {

 declare precedence: AspectJMLRac$JMLRacPost4Project, AspectJMLRac_* , *;



  /** Generated by AspectJML to check the exceptional postcondition of
   * method init. */
   after () throwing (Throwable rac$e) :
     execution(static void br.com.sigcar.util.HibernateUtil.init()) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.util.HibernateUtil.init()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.util.HibernateUtil.java\" by method br.com.sigcar.util.HibernateUtil.init\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.util.HibernateUtil.init regarding code at \nFile \"br.com.sigcar.util.HibernateUtil.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.util.HibernateUtil.init()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getEntityManager. */
   after () throwing (Throwable rac$e) :
     execution(static javax.persistence.EntityManager br.com.sigcar.util.HibernateUtil.getEntityManager()) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.util.HibernateUtil.getEntityManager()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.util.HibernateUtil.java\" by method br.com.sigcar.util.HibernateUtil.getEntityManager\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.util.HibernateUtil.getEntityManager regarding code at \nFile \"br.com.sigcar.util.HibernateUtil.java\", line 24 (br.com.sigcar.util.HibernateUtil.java:24)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.util.HibernateUtil.getEntityManager()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getPrimaryKey. */
   after (final java.lang.Object entity) throwing (Throwable rac$e) :
     execution(static java.lang.Object br.com.sigcar.util.HibernateUtil.getPrimaryKey(java.lang.Object)) && args(entity) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "br.com.sigcar.util.HibernateUtil.getPrimaryKey(java.lang.Object)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"br.com.sigcar.util.HibernateUtil.java\" by method br.com.sigcar.util.HibernateUtil.getPrimaryKey\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method br.com.sigcar.util.HibernateUtil.getPrimaryKey regarding code at \nFile \"br.com.sigcar.util.HibernateUtil.java\", line 28 (br.com.sigcar.util.HibernateUtil.java:28)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "br.com.sigcar.util.HibernateUtil.getPrimaryKey(java.lang.Object)", rac$e);
  		 }
  		   }
  	 }




}
